{
  "openapi": "3.0.2",
  "info": {
    "title": "Service Registry Management API",
    "version": "1.0.0",
    "description": "Service Registry Management API is a REST API for managing Service Registry instances. Service Registry is a datastore for event schemas and API designs, which is based on the open source Apicurio Registry project.",
    "contact": {
      "name": "Red Hat Hybrid Cloud Console",
      "url": "https://console.redhat.com/application-services/service-registry/",
      "email": "rhosak-eval-support@redhat.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.openshift.com",
      "description": "Main (production) server"
    },
    {
      "url": "https://api.stage.openshift.com",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8081",
      "description": "localhost"
    },
    {
      "url": "/",
      "description": "current domain"
    }
  ],
  "paths": {
    "/api/serviceregistry_mgmt/v1/registries": {
      "description": "Manage the list of all Registry instances",
      "get": {
        "tags": [
          "Registries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryList"
                }
              }
            },
            "description": "A successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "400Example": {
                    "$ref": "#/components/examples/400Example"
                  }
                }
              }
            },
            "description": "Invalid request content or parameters."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "getRegistries",
        "description": "Get the list of all Registry instances"
      },
      "post": {
        "requestBody": {
          "description": "A new `Registry` instance to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryCreate"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Registries"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "A successful response. The full request to create a new `Registry` instance is processed asynchronously. The user should verify the result of the operation by reading the `status` property of the created `Registry` instance."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "400Example": {
                    "$ref": "#/components/examples/400Example"
                  }
                }
              }
            },
            "description": "Invalid request content or parameters."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "409Example": {
                    "$ref": "#/components/examples/409Example"
                  }
                }
              }
            },
            "description": "Registry with the given name already exists, limit on the number of instances has been reached, or other precondition has not been met."
          },
          "415": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "415Example": {
                    "$ref": "#/components/examples/415Example"
                  }
                }
              }
            },
            "description": "Unsupported media type. The server expects a JSON request."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          },
          "503": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "503Example": {
                    "$ref": "#/components/examples/503Example"
                  }
                }
              }
            },
            "description": "Service has temporary issues while processing your request, please try again."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "createRegistry",
        "description": "Create a new Registry instance"
      }
    },
    "/api/serviceregistry_mgmt/v1/registries/{id}": {
      "description": "Manage a specific Registry instance",
      "get": {
        "tags": [
          "Registries"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "Successful response - returns a single `Registry` instance."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                }
              }
            },
            "description": "No Service Registry instance with specified id exists."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "getRegistry",
        "summary": "Get a Registry instance",
        "description": "Gets the details of a single instance of a `Registry`."
      },
      "delete": {
        "tags": [
          "Registries"
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                }
              }
            },
            "description": "No Service Registry instance with the specified id exists"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "deleteRegistry",
        "summary": "Delete a Registry instance",
        "description": "Deletes an existing `Registry` instance and all of the data that it stores. Important: Users should export the registry data before deleting the instance, e.g., using the Service Registry web console, core REST API, or `rhoas` CLI."
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ]
    },
    "/api/serviceregistry_mgmt/v1/errors/{id}": {
      "description": "Get information about a type of error. This is not an instance of a specific error.",
      "get": {
        "tags": [
          "Errors"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Successful response - returns a single `Error`."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                }
              }
            },
            "description": "No Service Registry with the specified id exists."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          }
        },
        "operationId": "getError",
        "description": "Get information about a specific error type"
      },
      "parameters": [
        {
          "$ref": "#/components/parameters/id"
        }
      ]
    },
    "/api/serviceregistry_mgmt/v1/errors": {
      "description": "Get a list of error types that can be returned by this API. These are not instances of specific errors.",
      "get": {
        "tags": [
          "Errors"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorList"
                }
              }
            },
            "description": "A successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "400Example": {
                    "$ref": "#/components/examples/400Example"
                  }
                }
              }
            },
            "description": "Invalid request content or parameters."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred."
          }
        },
        "operationId": "getErrors",
        "description": "Get the list of all errors"
      }
    },
    "/api/serviceregistry_mgmt/v1/status": {
      "description": "Retrieves the status of resources e.g., whether we have reached maximum service capacity",
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceStatus"
                }
              }
            },
            "description": "Successfully returned service status."
          },
          "401": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Authentication was not successful. Make sure the token is valid."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User is not authorized to perform the operation."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal error retrieving service status."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "operationId": "getServiceStatus",
        "description": "Get the service status"
      }
    }
  },
  "components": {
    "schemas": {
      "AbstractList": {
        "required": [
          "kind",
          "page",
          "size",
          "total"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "page": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "ErrorList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractList"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        ]
      },
      "List": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractList"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectReference"
                }
              }
            }
          }
        ]
      },
      "Error": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "required": [
              "code",
              "reason"
            ],
            "type": "object",
            "properties": {
              "reason": {
                "type": "string"
              },
              "operation_id": {
                "type": "string"
              },
              "code": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RegistryList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AbstractList"
          },
          {
            "required": [
              "items"
            ],
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          }
        ],
        "example": {
          "kind": "RegistryList",
          "page": "1",
          "size": "1",
          "total": "1",
          "items": [
            {
              "id": "5d8e5e39-6399-4273-9db5-7c0766aeb422",
              "kind": "ServiceRegistry",
              "href": "/api/serviceregistry_mgmt/v1/registries/5d8e5e39-6399-4273-9db5-7c0766aeb422",
              "name": "example-registry",
              "status": "ready",
              "owner": "example-user",
              "browserUrl": "http://localhost:8081/t/5d8e5e39-6399-4273-9db5-7c0766aeb422",
              "created_at": "2020-01-01T00:00:00Z",
              "updated_at": "2022-01-01T00:00:00Z",
              "instance_type": "standard"
            }
          ]
        }
      },
      "RegistryStatusValue": {
        "description": "\"accepted\": Registry status when accepted for processing.\n\n\"provisioning\": Registry status when provisioning a new instance.\n\n\"ready\": Registry status when ready for use.\n\n\"failed\": Registry status when the provisioning failed. When removing a Registry instance in this state,\nthe status transitions directly to \"deleting\".\n\n\n\"deprovision\": Registry status when accepted for deprovisioning.\n\n\"deleting\": Registry status when deprovisioning.\n",
        "enum": [
          "accepted",
          "provisioning",
          "ready",
          "failed",
          "deprovision",
          "deleting"
        ],
        "type": "string"
      },
      "RegistryInstanceTypeValue": {
        "description": "Type of the Registry instance. This will determine functional and/or non-functional features provided by the instance.\n\n\"standard\": Standard, full-featured Registry instance\n\n\"eval\": Evaluation (Trial) instance, provided for a limited time\n",
        "enum": [
          "standard",
          "eval"
        ],
        "type": "string"
      },
      "ServiceStatus": {
        "title": "Root type for ServiceStatus",
        "description": "Schema for the service status response body",
        "type": "object",
        "properties": {
          "max_instances_reached": {
            "description": "Boolean property indicating if the maximum number of total Registry instances have been reached, therefore creation of more instances should not be allowed.",
            "type": "boolean"
          }
        },
        "example": {
          "max_instances_reached": true
        }
      },
      "RegistryCreate": {
        "title": "Root type for RegistryCreate",
        "description": "Information used to create a new Service Registry instance in a multi-tenant deployment.",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "User-defined Registry instance name. Required. Must be unique within a given organization.",
            "maxLength": 32,
            "minLength": 1,
            "pattern": "[a-z]([a-z0-9\\-]*[a-z0-9])?",
            "type": "string"
          },
          "description": {
            "description": "User-provided description of the new Service Registry instance. Not required.",
            "maxLength": 255,
            "type": "string"
          }
        },
        "example": {
          "name": "example-registry",
          "description": "This Registry instance is for a development environment only."
        }
      },
      "ObjectReference": {
        "required": [
          "id",
          "kind",
          "href"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "href": {
            "type": "string"
          }
        }
      },
      "Registry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "title": "Root type for Registry",
            "description": "Service Registry instance in a multi-tenant deployment.",
            "required": [
              "status",
              "created_at",
              "updated_at",
              "instance_type",
              "name",
              "owner"
            ],
            "type": "object",
            "properties": {
              "status": {
                "$ref": "#/components/schemas/RegistryStatusValue"
              },
              "registryUrl": {
                "type": "string"
              },
              "browserUrl": {
                "type": "string"
              },
              "name": {
                "description": "User-defined Registry instance name. Does not have to be unique.",
                "type": "string"
              },
              "registryDeploymentId": {
                "description": "Identifier of a multi-tenant deployment, where this Service Registry instance resides.",
                "type": "integer"
              },
              "owner": {
                "description": "Registry instance owner.",
                "type": "string"
              },
              "description": {
                "description": "Description of the Registry instance.",
                "type": "string"
              },
              "created_at": {
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp.",
                "type": "string"
              },
              "updated_at": {
                "format": "date-time",
                "description": "ISO 8601 UTC timestamp.",
                "type": "string"
              },
              "instance_type": {
                "$ref": "#/components/schemas/RegistryInstanceTypeValue"
              }
            }
          }
        ],
        "example": {
          "id": "5d8e5e39-6399-4273-9db5-7c0766aeb422",
          "kind": "ServiceRegistry",
          "href": "/api/serviceregistry_mgmt/v1/registries/5d8e5e39-6399-4273-9db5-7c0766aeb422",
          "name": "example-registry",
          "status": "ready",
          "owner": "example-user",
          "browserUrl": "http://localhost:8081/t/5d8e5e39-6399-4273-9db5-7c0766aeb422",
          "created_at": "2020-01-01T00:00:00Z",
          "updated_at": "2022-01-01T00:00:00Z",
          "instance_type": "standard"
        }
      },
      "Empty": {
        "title": "Empty Response",
        "description": "Represents an empty response",
        "type": "string",
        "enum": [
          ""
        ]
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "description": "The id of the object you wish to interact with.",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "page": {
        "examples": {
          "page": {
            "value": 0
          }
        },
        "name": "page",
        "description": "Page index.",
        "schema": {
          "minimum": 0,
          "type": "integer"
        },
        "in": "query",
        "required": false
      },
      "size": {
        "examples": {
          "size": {
            "value": 100
          }
        },
        "name": "size",
        "description": "Number of items in each page.",
        "schema": {
          "maximum": 500,
          "minimum": 1,
          "type": "integer"
        },
        "in": "query",
        "required": false
      },
      "orderBy": {
        "style": "form",
        "explode": true,
        "examples": {
          "orderBy": {
            "value": "name asc"
          }
        },
        "name": "orderBy",
        "description": "Specifies the order by criteria. The syntax of this parameter is\nsimilar to the syntax of the _order by_ clause of an SQL statement.\nEach query can be ordered by any of the request fields.\nFor example, to retrieve all Registry instances ordered by their name:\n\n```sql\nname asc\n```\n\nOr to retrieve all Registry instances ordered by their name _and_ created date:\n\n```sql\nname asc, created_at asc\n```\n\nIf the parameter isn't provided, or if the value is empty, \nthe results are ordered by name.",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "required": false
      },
      "search": {
        "style": "form",
        "explode": true,
        "examples": {
          "search": {
            "value": "name = example-registry and status = ready"
          }
        },
        "name": "search",
        "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement. Allowed fields in the search are: `name`, `status`. Allowed comparators are `=` or `LIKE`.\nAllowed joins are `AND` and `OR`, however there is a limit of max 10 joins in the search query.\n\nExamples:\n\nTo retrieve a request with name equal `my-registry`, the value should be:\n\n```\nname = my-registry \n```\n\nTo retrieve a request with its name starting with `my`, the value should be:\n\n```\nname like my%25\n```\n\nIf the parameter isn't provided, or if the value is empty, all the Registry instances\nthat the user has permission to see are returned.\n\nNote: If the query is invalid, an error is returned.\n",
        "schema": {
          "type": "string"
        },
        "in": "query",
        "required": false
      }
    },
    "examples": {
      "400Example": {
        "value": {
          "id": "4",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/4",
          "code": "SRS-MGMT-4",
          "reason": "Invalid request content or parameters. Make sure the request conforms to the given JSON schema",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "401Example": {
        "value": ""
      },
      "403Example": {
        "value": {
          "id": "15",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/15",
          "code": "SRS-MGMT-15",
          "reason": "User is not authorized to perform the operation",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "404Example": {
        "value": {
          "id": "2",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/2",
          "code": "SRS-MGMT-2",
          "reason": "Registry with id='foo' not found",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "409Example": {
        "value": {
          "id": "9",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/9",
          "code": "SRS-MGMT-9",
          "reason": "Data conflict. Make sure a Registry with the given name does not already exist",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "415Example": {
        "value": {
          "id": "10",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/10",
          "code": "SRS-MGMT-10",
          "reason": "Bad request format - unsupported media type",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "500Example": {
        "value": {
          "id": "1",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/1",
          "code": "SRS-MGMT-1",
          "reason": "Unspecified error",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      },
      "503Example": {
        "value": {
          "id": "1",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/1",
          "code": "SRS-MGMT-1",
          "reason": "Unspecified error",
          "operation_id": "af2e70cb-a688-4e5c-8c4b-76662a663c29"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    }
  },
  "tags": [
    {
      "name": "Errors",
      "description": ""
    },
    {
      "name": "Registries",
      "description": ""
    }
  ]
}
