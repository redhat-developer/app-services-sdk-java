{
  "openapi": "3.0.2",
  "info": {
    "title": "Service Registry Fleet Manager",
    "version": "0.0.1",
    "description": "Managed Service Registry cloud.redhat.com API Management API that lets you create new registry instances. Registry is a datastore for standard event schemas and API designs. Service Registry enables developers to manage and share the structure of their data using a REST interface. For example, client applications can dynamically push or pull the latest updates to or from the registry without needing to redeploy. Registry is an Managed version of upstream project called Apicurio Registry. Apicurio Registry also enables developers to create rules that govern how registry content can evolve over time. For example, this includes rules for content validation and version compatibility.",
    "contact": {
      "name": "Cloud Red Hat",
      "url": "https://cloud.redhat.com/beta/application-services/streams/",
      "email": "rhosak-eval-support@redhat.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.openshift.com",
      "description": "Main (production) server"
    },
    {
      "url": "https://api.stage.openshift.com",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8000",
      "description": "localhost"
    },
    {
      "url": "/",
      "description": "current domain"
    }
  ],
  "paths": {
    "/api/serviceregistry_mgmt/v1/registries": {
      "summary": "Manage the list of all registries.",
      "description": "",
      "get": {
        "tags": [
          "Registries"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryRestList"
                }
              }
            },
            "description": "A successful response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User not authorized to access the service."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/size"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/search"
          }
        ],
        "operationId": "getRegistries",
        "summary": "Get the list of all registries.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Registries"
        ],
        "requestBody": {
          "description": "A new `Registry` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "A successful response. The full request to create a new `Registry` is processed asynchronously. User should verify the result of the operation by reading the `status` property of the created `Registry` entity."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User not authorized to access the service."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "500Example": {
                    "$ref": "#/components/examples/500Example"
                  }
                }
              }
            },
            "description": "Unexpected error occurred"
          }
        },
        "operationId": "createRegistry",
        "summary": "Create a new Registry instance",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/serviceregistry_mgmt/v1/{id}": {
      "summary": "Manage a specific Registry.",
      "description": "",
      "get": {
        "tags": [
          "Registries"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "Successful response - returns a single `Registry`."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User not authorized to access the service."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                }
              }
            },
            "description": "No service registry with specified id exists"
          }
        },
        "operationId": "getRegistry",
        "summary": "Get a Registry",
        "description": "Gets the details of a single instance of a `Registry`.",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Registries"
        ],
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "401Example": {
                    "$ref": "#/components/examples/401Example"
                  }
                }
              }
            },
            "description": "Auth token is invalid"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "403Example": {
                    "$ref": "#/components/examples/403Example"
                  }
                }
              }
            },
            "description": "User not authorized to access the service."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "404Example": {
                    "$ref": "#/components/examples/404Example"
                  }
                }
              }
            },
            "description": "No Service Registry with specified id exists"
          }
        },
        "operationId": "deleteRegistry",
        "summary": "Delete a Registry",
        "description": "Deletes an existing `Registry`.",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "description": "A unique identifier for a `Registry`.",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "ObjectReference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "href": {
            "type": "string"
          }
        }
      },
      "List": {
        "required": [
          "kind",
          "page",
          "size",
          "total",
          "items"
        ],
        "type": "object",
        "properties": {
          "kind": {
            "type": "string"
          },
          "page": {
            "type": "integer"
          },
          "size": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Error": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "operation_id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ErrorList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        ]
      },
      "RegistryRestList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/List"
          },
          {
            "type": "object",
            "example": {
              "kind": "RegistryRestList",
              "page": "1",
              "size": "1",
              "total": "1",
              "item": {
                "id": "llmNteR4P7waRp5nJIReG",
                "kind": "serviceregistry",
                "href": "/api/serviceregistry_mgmt/v1/registries/llmNteR4P7waRp5nJIReG",
                "name": "sample-registry",
                "status": "ready",
                "owner": "some_id",
                "registryUrl": "https://somehost:433"
              }
            },
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Registry"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "Registry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ObjectReference"
          },{ 
            "title": "Root Type for Registry",
            "description": "Service Registry instance within a multi-tenant deployment.",
            "required": [
              "id",
              "registryUrl",
              "status"
            ],
            "type": "object",
            "properties":
            {
              "id": {
                "type": "integer"
              },
              "status": {
                "$ref": "#/components/schemas/RegistryStatusValue",
                "description": ""
              },
              "registryUrl": {
                "type": "string"
              },
              "name": {
                "description": "User-defined Registry name. Does not have to be unique.",
                "type": "string"
              },
              "registryDeploymentId": {
                "description": "Identifier of a multi-tenant deployment, where this Service Registry instance resides.",
                "type": "integer"
              }
            },
            "example": {
              "id": 42,
              "name": "my-registry",
              "registryUrl": "https://registry.apps.example.com/t/5213600b-afc9-487e-8cc3-339f4248d706",
              "status": {
                "status": "PROVISIONING",
                "lastUpdated": "2021-05-04T12:34:56Z"
              },
              "registryDeploymentId": 1
            }
          }
          ]
      },
      "RegistryCreate": {
        "title": "Root Type for RegistryCreate",
        "description": "Information used to create a new Service Registry instance within a multi-tenant deployment.",
        "type": "object",
        "properties": {
          "name": {
            "description": "User-defined Registry name. Does not have to be unique.",
            "type": "string"
          }
        },
        "example": {
          "name": "my-registry"
        }
      },
      "RegistryStatusValue": {
        "description": "",
        "enum": [
          "PROVISIONING",
          "AVAILABLE",
          "UNAVAILABLE"
        ],
        "type": "string"
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "description": "The id of record",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page index",
        "required": false,
        "schema": {
          "type": "string"
        },
        "examples": {
          "page": {
            "value": "1"
          }
        }
      },
      "size": {
        "name": "size",
        "in": "query",
        "description": "Number of items in each page",
        "required": false,
        "schema": {
          "type": "string"
        },
        "examples": {
          "size": {
            "value": "100"
          }
        }
      },
      "orderBy": {
        "description": "Specifies the order by criteria. The syntax of this parameter is\nsimilar to the syntax of the _order by_ clause of an SQL statement.\nEach query can be ordered by any of the kafkaRequests fields.\nFor example, in order to retrieve all kafkas ordered by their name:\n\n```sql\nname asc\n```\n\nOr in order to retrieve all kafkas ordered by their name _and_ created date:\n\n```sql\nname asc, created_at asc\n```\n\nIf the parameter isn't provided, or if the value is empty, then\nthe results will be ordered by name.",
        "explode": true,
        "examples": {
          "orderBy": {
            "value": "name asc"
          }
        },
        "in": "query",
        "name": "orderBy",
        "required": false,
        "schema": {
          "type": "string"
        },
        "style": "form"
      },
      "search": {
        "description": "Search criteria.\n\nThe syntax of this parameter is similar to the syntax of the _where_ clause of an\nSQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are `<>`, `=` or `LIKE`.\nAllowed joins are `AND` and `OR`, however there is a limit of max 10 joins in the search query.\n\nExamples:\n\nTo retrieve kafka request with name equal `my-kafka` and region equal `aws`, the value should be:\n\n```\nname = my-kafka and cloud_provider = aws\n```\n\nTo retrieve kafka request with its name starting with `my`, the value should be:\n\n```\nname like my%25\n```\n\nIf the parameter isn't provided, or if the value is empty, then all the kafkas\nthat the user has permission to see will be returned.\n\nNote. If the query is invalid, an error will be returned\n",
        "explode": true,
        "name": "search",
        "in": "query",
        "required": false,
        "examples": {
          "search": {
            "value": "name = my-kafka and cloud_provider = aws"
          }
        },
        "schema": {
          "type": "string"
        },
        "style": "form"
      }
    },
    "examples": {
      "404Example": {
        "value": {
          "id": "404",
          "kind": "Error",
          "href": "/api/managed-services-api/v1/errors/7",
          "code": "MGD-SERV-API-7",
          "reason": "The requested resource doesn't exist"
        }
      },
      "401Example": {
        "value": {
          "id": "11",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/11",
          "code": "CLOUD-SERV-API-11",
          "reason": "Unable to verify JWT token: Required authorization token not found",
          "operation_id": "1iY3UhEhwmXBpWPfI2lNekpd4ZD"
        }
      },
      "403Example": {
        "value": {
          "id": "4",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/4",
          "code": "MGD-SERV-API-4",
          "reason": "User 'foo-bar' is not authorized to access the service.",
          "operation_id": "1lY3UiEhznXBpWPfI2lNejpd4YC"
        }
      },
      "500Example": {
        "value": {
          "id": "9",
          "kind": "Error",
          "href": "/api/serviceregistry_mgmt/v1/errors/9",
          "code": "MGD-SERV-API-9",
          "reason": "Unspecified error",
          "operation_id": "1ieELvF9jMQY6YghfM9gGRsHvEW"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    }
  }
}