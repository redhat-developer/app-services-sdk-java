{
  "openapi": "3.0.2",
  "info": {
    "title": "Service Registry Service - Fleet Manager - v1",
    "version": "0.0.1",
    "description": "Main entry point for the system, responsible for all sorts of management operations for the whole service of managed service registry.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "https://api.openshift.com",
      "description": "Main (production) server"
    },
    {
      "url": "https://api.stage.openshift.com",
      "description": "Staging server"
    },
    {
      "url": "http://localhost:8000",
      "description": "localhost"
    },
    {
      "url": "/",
      "description": "current domain"
    }
  ],
  "paths": {
    "/api/serviceregistry_mgmt/v1/registries": {
      "summary": "Manage the list of all registries.",
      "description": "",
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Registry"
                  }
                }
              }
            },
            "description": "A successful response."
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "operationId": "getRegistries",
        "summary": "Get the list of all registries.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "requestBody": {
          "description": "A new `Registry` to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "A successful response. The full request to create a new `Registry` is processed asynchronously. User should verify the result of the operation by reading the `status` property of the created `Registry` entity."
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "operationId": "createRegistry",
        "summary": "Create a Registry.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/serviceregistry_mgmt/v1/registries/{registryId}": {
      "summary": "Manage a specific Registry.",
      "description": "",
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            },
            "description": "Successful response - returns a single `Registry`."
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "operationId": "getRegistry",
        "summary": "Get a Registry",
        "description": "Gets the details of a single instance of a `Registry`.",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Successful response."
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        },
        "operationId": "deleteRegistry",
        "summary": "Delete a Registry",
        "description": "Deletes an existing `Registry`.",
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "parameters": [
        {
          "name": "registryId",
          "description": "A unique identifier for a `Registry`.",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Registry": {
        "title": "Root Type for Registry",
        "description": "Service Registry instance within a multi-tenant deployment.",
        "required": ["id", "registryUrl", "status"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/RegistryStatus",
            "description": ""
          },
          "registryUrl": {
            "type": "string"
          },
          "name": {
            "description": "User-defined Registry name. Does not have to be unique.",
            "type": "string"
          },
          "registryDeploymentId": {
            "description": "Identifier of a multi-tenant deployment, where this Service Registry instance resides.",
            "type": "integer"
          }
        },
        "example": {
          "id": "dsadas",
          "name": "my-registry",
          "registryUrl": "https://registry.apps.example.com/t/5213600b-afc9-487e-8cc3-339f4248d706",
          "status": {
            "status": "PROVISIONING",
            "lastUpdated": "2021-05-04T12:34:56Z"
          },
          "registryDeploymentId": 1
        }
      },
      "RegistryStatus": {
        "description": "",
        "required": ["value", "lastUpdated"],
        "type": "object",
        "properties": {
          "lastUpdated": {
            "format": "date-time",
            "description": "ISO 8601 UTC timestamp.",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/RegistryStatusValue",
            "description": ""
          }
        },
        "example": {
          "value": "AVAILABLE",
          "lastUpdated": "2021-05-04T12:34:56Z"
        }
      },
      "RegistryCreate": {
        "title": "Root Type for RegistryCreate",
        "description": "Information used to create a new Service Registry instance within a multi-tenant deployment.",
        "type": "object",
        "properties": {
          "name": {
            "description": "User-defined Registry name. Does not have to be unique.",
            "type": "string"
          }
        },
        "example": {
          "name": "my-registry"
        }
      },
      "RegistryStatusValue": {
        "description": "",
        "enum": ["PROVISIONING", "AVAILABLE", "UNAVAILABLE"],
        "type": "string"
      },
      "ErrorInfo1": {
        "title": "Root Type for ErrorInfo",
        "description": "Details about a specific error returned by the server.",
        "required": [
          "error_code"
        ],
        "type": "object",
        "properties": {
          "error_code": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          }
        },
        "example": {
          "error_code": 500,
          "message": "An error occurred on the server."
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "responses": {
      "NotFound": {
        "$ref": "#/components/responses/NotFound1"
      },
      "ServerError": {
        "$ref": "#/components/responses/ServerError1"
      },
      "NotFound1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo1"
            }
          }
        },
        "description": "The response returned when something is requested but cannot be found."
      },
      "ServerError1": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo1"
            }
          }
        },
        "description": "The response sent from the server when an unexpected error occurs (for example \na database connection error)."
      }
    }
  }
}