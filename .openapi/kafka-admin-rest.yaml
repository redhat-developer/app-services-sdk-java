openapi: 3.0.3
info:
  title: Kafka Admin REST API
  version: 0.3.0
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
servers:
  - url: '/rest'
    description: Kafka Admin REST API
security:
  - Bearer: []
tags:
  - name: topics
    description: Topic Management
  - name: groups
    description: Consumer Group Management
  - name: acls
    description: Access Control Management (ACLs)
paths:
  /topics:
    get:
      tags: [ topics ]
      parameters:
        - name: offset
          description: The page offset
          deprecated: true
          schema:
            type: integer
          in: query
        - name: limit
          description: Maximum number of topics to return
          deprecated: true
          schema:
            type: integer
          in: query
        - name: size
          description: Maximum number of topics to return on single page
          schema:
            format: int32
            type: integer
          in: query
          required: false
        - name: filter
          description: Filter to apply when returning the list of topics
          schema:
            type: string
          in: query
        - name: page
          description: The page when returning the limit of requested topics.
          schema:
            format: int32
            type: integer
          in: query
        - name: order
          description: >-
            Order of the items sorting. Ascending order is used as default.
          schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          required: false
        - name: orderKey
          description: >-
            Order key to sort the topics by.
          schema:
            type: string
            enum:
              - name
              - partitions
              - retention.ms
              - retention.bytes
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
          description: >-
            List of topics matching the request query parameters. The topics
            returned are limited to those records the requestor is authorized
            to view.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unable to retrieve topics.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: getTopics
      summary: List of topics
      description: >-
        Returns a list of all of the available topics, or the list of topics that meet the request
        query parameters. The topics returned are limited to those records the requestor
        is authorized to view.
    post:
      tags: [ topics ]
      requestBody:
        description: Topic to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTopicInput'
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                      - key: min.insync.replicas
                        value: '1'
                      - key: max.message.bytes
                        value: '1050000'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: createTopic
      summary: Creates a new topic
      description: Creates a new topic for Kafka.
  '/topics/{topicName}':
    get:
      tags: [ topics ]
      parameters:
        - name: topicName
          description: The topic name to retrieve.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Kafka topic details.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        '500':
         $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: getTopic
      summary: Retrieves the topic with the specified name.
      description: Topic
    delete:
      tags: [ topics ]
      parameters:
        - name: topicName
          description: The topic name to delete.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          description: Topic deleted successfully.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: deleteTopic
      summary: Deletes a  topic
      description: Deletes the topic with the specified name.
    patch:
      tags: [ topics ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicInput'
        required: true
      parameters:
        - name: topicName
          description: The topic name which is its unique id.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic updated successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: updateTopic
      summary: Updates the topic with the specified name.
      description: updates the topic with the new data.
    parameters:
      - name: topicName
        description: The topic name which is its unique id.
        schema:
          type: string
        in: path
        required: true
  '/consumer-groups/{consumerGroupId}':
    get:
      tags: [ groups ]
      parameters:
        - name: consumerGroupId
          description: The unique ID of the consumer group
          schema:
            type: string
          in: path
          required: true
        - name: order
          description: >-
            Order of the items sorting. Ascending order is used as default.
          schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          required: false
        - name: orderKey
          description: >-
            Order key to sort the topics by.
          schema:
            type: string
            enum:
              - offset
              - endOffset
              - lag
              - partition
          in: query
          required: false
        - name: partitionFilter
          description: >-
            Value of partition to include. Value -1 means filter is not active.
          schema:
            type: integer
          in: query
          required: false
        - examples:
            Consumer group:
              value:
                groupId: consumer_group_1
                consumers:
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 0
                    memberId: consumer_group_member1
                    offset: 5
                    lag: 0
                    logEndOffset: 5
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 1
                    memberId: consumer_group_member2
                    offset: 3
                    lag: 0
                    logEndOffset: 3
                  - groupId: consumer_group_1
                    topic: topic-1
                    partition: 2
                    memberId: consumer_group_member3
                    offset: 6
                    lag: 1
                    logEndOffset: 5
          name: topic
          description: Filter consumer groups for a specific topic
          schema:
            type: string
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Consumer group details.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is forbidden this view this consumer group.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Consumer group not found.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: getConsumerGroupById
      summary: Get a single consumer group by its unique ID.
    delete:
      tags: [ groups ]
      parameters:
        - name: consumerGroupId
          description: The unique ID of the cobsumer group.
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: The consumer group was deleted successfully.
        '401':
         $ref: '#/components/responses/NotAuthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden to delete this consumer group.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The consumer group does not exist.
        '423':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User cannot delete consumer group with active members.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: deleteConsumerGroupById
      summary: Delete a consumer group.
      description: 'Delete a consumer group, along with its consumers.'
    parameters:
      - name: consumerGroupId
        description: The unique name of the topic.
        schema:
          type: string
        in: path
        required: true
  /consumer-groups:
    summary: API endpoints for consumer groups under a Kafka topic
    get:
      tags: [ groups ]
      parameters:
        - name: offset
          description: The page offset
          deprecated: true
          schema:
            type: integer
          in: query
        - name: limit
          description: Maximum number of consumer groups to return
          deprecated: true
          schema:
            type: integer
          in: query
        - name: size
          description: Maximum number of consumer groups to return on single page
          schema:
            type: integer
          in: query
        - name: page
          description: The page when returning the list of consumer groups
          schema:
            type: integer
          in: query
        - name: topic
          description: Return consumer groups where the topic name contains with this value
          schema:
            type: string
          in: query
        - name: group-id-filter
          description: Return the consumer groups where the ID contains with this value
          schema:
            type: string
          in: query
        - name: order
          description: >-
            Order of the consumer groups sorting. Ascending order is used as default.
          schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          required: false
        - name: orderKey
          description: >-
            Order key to sort the items by. Only the value 'name' is currently applicable.
          schema:
            type: string
            enum:
              - name
          in: query
          required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
              examples:
                List of consumer groups:
                  value:
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                      - groupId: consumer_group_1
                        consumers:
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 0
                            memberId: consumer_group_member1
                            offset: 5
                            lag: 0
                            logEndOffset: 5
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 1
                            memberId: consumer_group_member2
                            offset: 3
                            lag: 0
                            logEndOffset: 3
                          - groupId: consumer_group_1
                            topic: topic-1
                            partition: 2
                            memberId: consumer_group_member3
                            offset: 6
                            lag: 1
                            logEndOffset: 5
          description: >-
            List of consumer groups matching the request parameters.
            The consumer groups returned are limited to those records the requestor
            is authorized to view.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: >-
            The server cannot or will not process the request due to something that is perceived
            to be a client error such as malformed request syntax.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: getConsumerGroups
      summary: List of consumer groups in the Kafka instance.
      description: >-
        Returns a list of all consumer groups for a particular Kafka instance.
        The consumer groups returned are limited to those records the requestor
        is authorized to view.
  '/consumer-groups/{consumerGroupId}/reset-offset':
    post:
      tags: [ groups ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroupResetOffsetParameters'
            examples:
              ConsumerGroupOffsetResetExample:
                value:
                  topics:
                    -
                      topic: my-topic
                      partitions:
                        - 0
                  offset: absolute
                  value: '4'
        required: true
      parameters:
        - name: consumerGroupId
          description: The ID of the consumer group.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupResetOffsetResult'
          description: The consumer group offsets have been reset.
        '400':
          description: The consumer group to reset the offset does have active consumers.
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden to delete this consumer group.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Specified topic or its partition does not exist.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: resetConsumerGroupOffset
      summary: Reset the offset for a consumer group.
      description: Reset the offset for a particular consumer group.
  /acls:
    get:
      tags: [ acls ]
      parameters:
        - $ref: '#/components/parameters/AclResourceTypeFilter'
        - $ref: '#/components/parameters/AclResourceName'
        - $ref: '#/components/parameters/AclPatternTypeFilter'
        - $ref: '#/components/parameters/AclPrincipal'
        - $ref: '#/components/parameters/AclOperationFilter'
        - $ref: '#/components/parameters/AclPermissionTypeFilter'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageSize'
        - name: order
          description: >-
            Order of the ACL binding sorting.
          in: query
          required: false
          schema:
            type: string
            default: 'desc'
            enum:
              - 'asc'
              - 'desc'
        - name: orderKey
          description: >-
            Order key to sort the items by.
          in: query
          required: false
          schema:
            type: string
            default: 'permission'
            enum:
              - 'resourceType'
              - 'resourceName'
              - 'patternType'
              - 'principal'
              - 'operation'
              - 'permission'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of ACL bindings matching the query parameters.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: getAcls
      summary: List ACL bindings
      description: >-
        Returns a list of all of the available ACL bindings, or the list of bindings that meet the users URL
        Query Parameters. If no parameters are specified, all ACL bindings known to the system will be returned (with paging).
    post:
      tags: [ acls ]
      requestBody:
        description: ACL to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclBinding'
        required: true
      responses:
        '201':
          description: ACL created successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: createAcl
      summary: Create ACL binding
      description: Creates a new ACL binding for a Kafka instance.
    delete:
      tags: [ acls ]
      parameters:
        - $ref: '#/components/parameters/AclResourceTypeFilter'
        - $ref: '#/components/parameters/AclResourceName'
        - $ref: '#/components/parameters/AclPatternTypeFilter'
        - $ref: '#/components/parameters/AclPrincipal'
        - $ref: '#/components/parameters/AclOperationFilter'
        - $ref: '#/components/parameters/AclPermissionTypeFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of all ACL bindings matching the query parameters that were deleted.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
      operationId: deleteAcls
      summary: Delete ACL bindings
      description: >-
        Deletes ACL bindings that match the query parameters.
  /acls/resource-operations:
    get:
      tags: [ acls ]
      operationId: getAclResourceOperations
      summary: Retrieve allowed ACL resources and operations
      description: >-
        Retrieve the resources and associated operations that may have ACLs
        configured.
      responses:
        '200':
          description: Map of allowed resources and operations for ACL creation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
              examples:
                success:
                  summary: Map of resources to allowed ACL operations
                  value: |-
                    {
                        "cluster": [ "describe", "alter" ],
                        "group": [ "all", "delete", "describe", "read" ],
                        "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ],
                        "transactional_id": [ "all", "describe", "write" ]
                    }
                disabled:
                  summary: No configuration of ACL bindings is allowed
                  value: '{}'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
  /: {}
components:
  schemas:
    AclBinding:
      title: ACL Binding
      description: Represents a binding between a resource pattern and an access control entry
      type: object
      required: [ resourceType, resourceName, patternType, principal, operation, permission ]
      properties:
        resourceType:
          $ref: '#/components/schemas/AclResourceType'
        resourceName:
          type: string
        patternType:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          $ref: '#/components/schemas/AclPrincipal'
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermissionType'
      example:
        resourceType: TOPIC
        resourceName: '*'
        patternType: LITERAL
        principal: 'User:user123'
        operation: READ
        permission: ALLOW
    AclBindingList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AclBinding'
    AclBindingListPage:
      title: ACL Binding List Page
      description: A page of ACL binding entries
      type: object
      allOf:
        - $ref: '#/components/schemas/AclBindingList'
        - $ref: '#/components/schemas/ResultListPage'
    AclResourceType:
      title: ACL Resource Type
      type: string
      nullable: false
      enum:
      - 'GROUP'
      - 'TOPIC'
      - 'CLUSTER'
      - 'TRANSACTIONAL_ID'
    AclResourceTypeFilter:
      title: ACL Resource Type Filter
      type: string
      default: 'ANY'
      enum:
      - 'ANY'
      - 'GROUP'
      - 'TOPIC'
      - 'CLUSTER'
      - 'TRANSACTIONAL_ID'
    AclPatternType:
      title: ACL Pattern Type
      type: string
      nullable: false
      enum:
      - 'LITERAL'
      - 'PREFIXED'
    AclPatternTypeFilter:
      title: ACL Pattern Type Filter
      description: Use value 'MATCH' to perform pattern matching.
      type: string
      default: 'ANY'
      enum:
      - 'LITERAL'
      - 'PREFIXED'
      - 'ANY'
      - 'MATCH'
    AclOperation:
      title: ACL Operation
      type: string
      nullable: false
      enum:
      - 'ALL'
      - 'READ'
      - 'WRITE'
      - 'CREATE'
      - 'DELETE'
      - 'ALTER'
      - 'DESCRIBE'
      - 'DESCRIBE_CONFIGS'
      - 'ALTER_CONFIGS'
    AclOperationFilter:
      title: ACL Operation Filter
      type: string
      default: 'ANY'
      enum:
      - 'ALL'
      - 'READ'
      - 'WRITE'
      - 'CREATE'
      - 'DELETE'
      - 'ALTER'
      - 'DESCRIBE'
      - 'DESCRIBE_CONFIGS'
      - 'ALTER_CONFIGS'
      - 'ANY'
    AclPermissionType:
      title: ACL Permission Type
      type: string
      nullable: false
      enum:
      - 'ALLOW'
      - 'DENY'
    AclPermissionTypeFilter:
      title: ACL Permission Type Filter
      type: string
      default: 'ANY'
      enum:
      - 'ALLOW'
      - 'DENY'
      - 'ANY'
    AclPrincipal:
      title: ACL Principal
      nullable: false
      description: >-
        Identifies the user or service account to which an ACL entry is bound.
        The literal prefix value of `User:` is required. May be used to specify
        all users with value `User:*`.
      type: string
      pattern: '^User:(\*|[a-zA-Z0-9_@.-]+)$'
      example: 'User:user-123-abc'
    Topic:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: '#/components/schemas/ConfigEntry'
        partitions:
          description: Partitions for this topic.
          type: array
          items:
            $ref: '#/components/schemas/Partition'
      example:
        name: my-topic
        config:
          - key: min.insync.replicas
            value: '1'
          - key: max.message.bytes
            value: '1050000'
        partitions:
          - id: 0
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
              - id: 0
              - id: 1
            isr:
              - id: 0
              - id: 1
            leader:
              id: 1
    Partition:
      description: Kafka topic partition
      required:
        - partition
      type: object
      properties:
        partition:
          description: The partition id, unique among partitions of the same topic
          type: integer
        id:
          description: Unique id for the partition (deprecated, use `partition` instead)
          type: integer
          deprecated: true
        replicas:
          description: List of replicas for the partition
          type: array
          items:
            $ref: '#/components/schemas/Node'
        isr:
          description: List in-sync replicas for this partition.
          type: array
          items:
            $ref: '#/components/schemas/Node'
        leader:
          $ref: '#/components/schemas/Node'
          description: Node that is the leader for this partition.
      example:
        id: 0
        replicas:
          - id: 0
          - id: 1
        isr:
          - id: 0
          - id: 1
        leader:
          id: 1
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a topic.
      type: object
      properties:
        key:
          description: The key indicating what configuration entry you would like to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      example:
        key: min.insync.replicas
        value: '1'
    TopicsList:
      description: A list of topics.
      type: object
      properties:
        page:
          description: The page
          type: integer
        size:
          description: number of entries per page
          type: integer
        offset:
          description: Offset of the topic list
          deprecated: true
          type: integer
        limit:
          description: Maximum of returned topics
          deprecated: true
          type: integer
        total:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          type: array
          items:
            $ref: '#/components/schemas/Topic'
      example:
        items:
          - name: my-topic
            config:
              - key: min.insync.replicas
                value: '1'
              - key: max.message.bytes
                value: '1050000'
            partitions:
              - id: 0
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 0
              - id: 1
                replicas:
                  - id: 0
                  - id: 1
                isr:
                  - id: 0
                  - id: 1
                leader:
                  id: 1
        offset: 25
        limit: 90
        count: 94
    TopicSettings:
      title: Root Type for NewTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      required:
        - numPartitions
      type: object
      properties:
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          type: array
          items:
            $ref: '#/components/schemas/ConfigEntry'
      example:
        numPartitions: 2
        config:
          - key: min.insync.replicas
            value: '1'
          - key: max.message.bytes
            value: '1050000'
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      required:
        - name
        - settings
      type: object
      properties:
        name:
          description: 'The topic name, this value must be unique.'
          type: string
        settings:
          $ref: '#/components/schemas/TopicSettings'
          description: >-
            The settings that are applicable to this topic.  This includes partitions,
            configuration information, and number of replicas.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
            - key: min.insync.replicas
              value: '1'
            - key: max.message.bytes
              value: '1050000'
    ConsumerGroup:
      description: A group of Kafka consumers
      required:
        - groupId
        - consumers
      type: object
      properties:
        groupId:
          description: Unique identifier for the consumer group
          type: string
        state:
          type: string
          enum:
            - STABLE
            - DEAD
            - EMPTY
            - COMPLETING_REBALANCE
            - PREPARING_REBALANCE
            - UNKNOWN
        consumers:
          description: The list of consumers associated with this consumer group
          type: array
          items:
            $ref: '#/components/schemas/Consumer'
      example:
        id: consumer_group_1
        consumers:
          - groupId: consumer_group_1
            topic: topic-1
            partition: 0
            memberId: consumer_group_member1
            offset: 5
            lag: 0
            logEndOffset: 5
          - groupId: consumer_group_1
            topic: topic-1
            partition: 1
            memberId: consumer_group_member2
            offset: 3
            lag: 0
            logEndOffset: 3
          - groupId: consumer_group_1
            topic: topic-1
            partition: 2
            memberId: consumer_group_member3
            offset: 6
            lag: 1
            logEndOffset: 5
    Consumer:
      description: >-
        A Kafka consumer is responsible for reading records from one or more topics and one or more
        partitions of a topic.
      required:
        - groupId
        - topic
        - partition
        - offset
        - lag
      type: object
      properties:
        groupId:
          description: Unique identifier for the consumer group to which this consumer belongs.
          type: string
        topic:
          description: The unique topic name to which this consumer belongs
          type: string
        partition:
          description: The partition number to which this consumer group is assigned to.
          type: integer
        offset:
          description: Offset denotes the position of the consumer in a partition.
          type: number
        logEndOffset:
          description: The log end offset is the offset of the last message written to a log.
          type: number
        lag:
          description: >-
            Offset Lag is the delta between the last produced message and the last consumer's
            committed offset.
          type: integer
        memberId:
          description: >-
            The member ID is a unique identifier given to a consumer by the coordinator upon
            initially joining the group.
          type: string
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
    ConsumerGroupList:
      description: A list of consumer groups
      type: object
      properties:
        items:
          description: Consumer group list items
          type: array
          items:
            $ref: '#/components/schemas/ConsumerGroup'
        total:
          description: The total number of consumer groups.
          type: number
        size:
          description: The number of consumer groups per page.
          type: number
        page:
          description: The page
          type: integer
        offset:
          description: Offset of the topic list
          deprecated: true
          type: integer
        limit:
          description: Maximum of returned topics
          deprecated: true
          type: integer
        count:
          description: The total number of consumer groups.
          deprecated: true
          type: number
      example:
        count: 1
        limit: 10
        offset: 0
        items:
          - groupId: consumer_group_1
            consumers:
              - groupId: consumer_group_1
                topic: topic-1
                partition: 0
                memberId: consumer_group_member1
                offset: 5
                lag: 0
                logEndOffset: 5
              - groupId: consumer_group_1
                topic: topic-1
                partition: 1
                memberId: consumer_group_member2
                offset: 3
                lag: 0
                logEndOffset: 3
              - groupId: consumer_group_1
                topic: topic-1
                partition: 2
                memberId: consumer_group_member3
                offset: 6
                lag: 1
                logEndOffset: 5
    UpdateTopicInput:
      title: Root Type for UpdateTopicInput
      description: Kafka Topic (A feed where records are stored and published)
      type: object
      properties:
        config:
          description: Topic configuration entries.
          type: array
          items:
            $ref: '#/components/schemas/ConfigEntry'
        numPartitions:
          description: Number of partitions (only increasing supported)
          type: integer
      example:
        config:
          -
            key: min.insync.replicas
            value: '1'
          -
            key: max.message.bytes
            value: '1050000'
    ConsumerGroupResetOffsetParameters:
      title: Root Type for ConsumerGroupResetOffsetParameters
      description: ''
      required:
        - offset
      type: object
      properties:
        value:
          type: string
        offset:
          type: string
          enum:
            - timestamp
            - absolute
            - latest
            - earliest
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicsToResetOffset'
      example:
        topics:
          - topic: my-topic
            partitions:
              - 0
        offset: absolute
        value: '4'
    TopicsToResetOffset:
      title: Root Type for TopicsToResetOffset
      description: ''
      required:
        - topic
      type: object
      properties:
        topic:
          type: string
        partitions:
          type: array
          items:
            format: int32
            type: integer
      example:
        topic: foo
        partitions:
          - 0
          - 1
          - 2
    ConsumerGroupResetOffsetResult:
      title: Root Type for ConsumerGroupResetOffsetResult
      description: ''
      type: object
      allOf:
        - $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItemList'
        - $ref: '#/components/schemas/ResultListPage'
      example:
        total: 2
        page: 1
        size: 10
        items:
          - topic: your-topic
            partition: 0
            offset: 4
          - topic: my-topic
            partition: 0
            offset: 0
    ConsumerGroupResetOffsetResultItemList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItem'
    ConsumerGroupResetOffsetResultItem:
      type: object
      properties:
        topic:
          type: string
        partition:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
      example:
        topic: your-topic
        partition: 0
        offset: 4
    ResultListPage:
      type: object
      required:
        - total
      properties:
        total:
          description: Total number of entries in the full result set
          type: number
        page:
          description: Current page number (returned for fetch requests)
          type: integer
        size:
          description: Number of entries per page (returned for fetch requests)
          type: number
    Error:
      description: General error response
      type: object
      properties:
        code:
          type: integer
          format: int32
        error_message:
          type: string
        class:
          type: string
  parameters:
    AclResourceTypeFilter:
      name: resourceType
      in: query
      description: ACL Resource Type Filter
      schema:
        $ref: '#/components/schemas/AclResourceTypeFilter'
      examples:
        anything:
          summary: Match any ACL binding resource type
          value: 'ANY'
        group:
          summary: Match ACL bindings for consumer groups
          value: 'GROUP'
        topic:
          summary: Match ACL bindings for topics
          value: 'GROUP'
        cluster:
          summary: Match ACL bindings for the cluster
          value: 'CLUSTER'
        transactional_id:
          summary: Match ACL bindings for transactional IDs
          value: 'TRANSACTIONAL_ID'
    AclResourceName:
      name: resourceName
      in: query
      description: ACL Resource Name Filter
      schema:
        type: string
    AclPatternTypeFilter:
      name: patternType
      in: query
      description: ACL Pattern Type Filter
      schema:
        $ref: '#/components/schemas/AclPatternTypeFilter'
      examples:
        anything:
          summary: Match any ACL binding pattern type
          value: 'ANY'
        literal:
          summary: Match a literal resource name or `*`
          value: 'LITERAL'
        prefixed:
          summary: Match a prefixed resource name
          value: 'PREFIXED'
    AclPrincipal:
      name: principal
      in: query
      description: |-
        ACL Principal Filter. Either a specific user or the wildcard user `User:*`
        may be provided.
        - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
        - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
      schema:
        $ref: '#/components/schemas/AclPrincipal'
      examples:
        wildcard:
          summary: Match ACL entries that apply to all users
          value: 'User:*'
        specific:
          summary: Match ACL entries for a specific user
          value: 'User:admin-5a1-0c1'
    AclOperationFilter:
      name: operation
      in: query
      description: |-
        ACL Operation Filter. The ACL binding operation provided should be valid
        for the resource type in the request, if not `ANY`.
      schema:
        $ref: '#/components/schemas/AclOperationFilter'
      examples:
        anything:
          summary: Match any ACL binding operation
          value: 'ANY'
    AclPermissionTypeFilter:
      name: permission
      in: query
      description: ACL Permission Type Filter
      schema:
        $ref: '#/components/schemas/AclPermissionTypeFilter'
      examples:
        anything:
          summary: Match any ACL binding permission type
          value: 'ANY'
        allow:
          summary: Match only ACL bindings allowing access
          value: 'ALLOW'
        deny:
          summary: Match only ACL bindings denying access
          value: 'DENY'
    PageNumber:
      name: page
      in: query
      description: Page number for result lists
      schema:
        type: number
        minimum: 1
        default: 1
    PageSize:
      name: size
      in: query
      description: Page size for result lists
      schema:
        type: number
        minimum: 1
        default: 10
  responses:
    BadRequest:
      # Status 400
      description: The client request was invalid
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    NotAuthorized:
      # Status 401
      description: Request authentication missing or invalid
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    Forbidden:
      # Status 403
      description: User is not authorized to access requested resource
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    Conflict:
      # Status 409
      description: The resource already exists.
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    ServerError:
      # Status 500
      description: Internal server error
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      # Status 503
      description: Kafka service unavailable
      content:
         application/json:
           schema:
             $ref: '#/components/schemas/Error'
  securitySchemes:
    Bearer:
      type: oauth2
      description: Access token used with OAuth 2.0
      flows:
        clientCredentials:
          # Place-holder value for `tokenUrl`
          tokenUrl: "/token"
          scopes: {}
