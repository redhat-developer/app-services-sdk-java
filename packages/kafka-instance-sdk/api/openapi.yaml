openapi: 3.0.3
info:
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Kafka Admin REST API
  version: 0.3.0
servers:
- description: Kafka Admin REST API
  url: /rest
security:
- Bearer: []
tags:
- description: Topic Management
  name: topics
- description: Consumer Group Management
  name: groups
- description: Access Control Management (ACLs)
  name: acls
paths:
  /topics:
    get:
      description: Returns a list of all of the available topics, or the list of topics
        that meet the request query parameters. The topics returned are limited to
        those records the requestor is authorized to view.
      operationId: getTopics
      parameters:
      - description: Maximum number of topics to return on single page
        explode: true
        in: query
        name: size
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter to apply when returning the list of topics
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: The page when returning the limit of requested topics.
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Order of the items sorting. Ascending order is used as default.
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the topics by.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          enum:
          - name
          - partitions
          - retention.ms
          - retention.bytes
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
          description: List of topics matching the request query parameters. The topics
            returned are limited to those records the requestor is authorized to view.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unable to retrieve topics.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: List of topics
      tags:
      - topics
      x-accepts: application/json
    post:
      description: Creates a new topic for Kafka.
      operationId: createTopic
      requestBody:
        content:
          application/json:
            examples:
              NewTopicInput:
                value:
                  name: my-topic
                  settings:
                    numPartitions: 3
                    replicationFactor: 4
                    config:
                    - key: min.insync.replicas
                      value: "1"
                    - key: max.message.bytes
                      value: "1050000"
            schema:
              $ref: '#/components/schemas/NewTopicInput'
        description: Topic to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The client request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource already exists.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Creates a new topic
      tags:
      - topics
      x-contentType: application/json
      x-accepts: application/json
  /topics/{topicName}:
    delete:
      description: Deletes the topic with the specified name.
      operationId: deleteTopic
      parameters:
      - description: The topic name to delete.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Topic deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Deletes a  topic
      tags:
      - topics
      x-accepts: application/json
    get:
      description: Topic
      operationId: getTopic
      parameters:
      - description: The topic name to retrieve.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Kafka topic details.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Retrieves the topic with the specified name.
      tags:
      - topics
      x-accepts: application/json
    patch:
      description: updates the topic with the new data.
      operationId: updateTopic
      parameters:
      - description: The topic name which is its unique id.
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTopicInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic updated successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The client request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Topic not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Updates the topic with the specified name.
      tags:
      - topics
      x-contentType: application/json
      x-accepts: application/json
  /consumer-groups/{consumerGroupId}:
    delete:
      description: Delete a consumer group, along with its consumers.
      operationId: deleteConsumerGroupById
      parameters:
      - description: The unique ID of the cobsumer group.
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The consumer group was deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden to delete this consumer group.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The consumer group does not exist.
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User cannot delete consumer group with active members.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Delete a consumer group.
      tags:
      - groups
      x-accepts: application/json
    get:
      operationId: getConsumerGroupById
      parameters:
      - description: The unique ID of the consumer group
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: Order of the items sorting. Ascending order is used as default.
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the topics by.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          enum:
          - offset
          - endOffset
          - lag
          - partition
          type: string
        style: form
      - description: Value of partition to include. Value -1 means filter is not active.
        explode: true
        in: query
        name: partitionFilter
        required: false
        schema:
          type: integer
        style: form
      - description: Filter consumer groups for a specific topic
        examples:
          Consumer group:
            value:
              groupId: consumer_group_1
              consumers:
              - groupId: consumer_group_1
                topic: topic-1
                partition: 0
                memberId: consumer_group_member1
                offset: 5
                lag: 0
                logEndOffset: 5
              - groupId: consumer_group_1
                topic: topic-1
                partition: 1
                memberId: consumer_group_member2
                offset: 3
                lag: 0
                logEndOffset: 3
              - groupId: consumer_group_1
                topic: topic-1
                partition: 2
                memberId: consumer_group_member3
                offset: 6
                lag: 1
                logEndOffset: 5
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Consumer group details.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is forbidden this view this consumer group.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Consumer group not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Get a single consumer group by its unique ID.
      tags:
      - groups
      x-accepts: application/json
  /consumer-groups:
    get:
      description: Returns a list of all consumer groups for a particular Kafka instance.
        The consumer groups returned are limited to those records the requestor is
        authorized to view.
      operationId: getConsumerGroups
      parameters:
      - description: Maximum number of consumer groups to return on single page
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: integer
        style: form
      - description: The page when returning the list of consumer groups
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: Return consumer groups where the topic name contains with this
          value
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      - description: Return the consumer groups where the ID contains with this value
        explode: true
        in: query
        name: group-id-filter
        required: false
        schema:
          type: string
        style: form
      - description: Order of the consumer groups sorting. Ascending order is used
          as default.
        explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the items by. Only the value 'name' is currently
          applicable.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          enum:
          - name
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List of consumer groups:
                  value:
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                    - groupId: consumer_group_1
                      consumers:
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 0
                        memberId: consumer_group_member1
                        offset: 5
                        lag: 0
                        logEndOffset: 5
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 1
                        memberId: consumer_group_member2
                        offset: 3
                        lag: 0
                        logEndOffset: 3
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 2
                        memberId: consumer_group_member3
                        offset: 6
                        lag: 1
                        logEndOffset: 5
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
          description: List of consumer groups matching the request parameters. The
            consumer groups returned are limited to those records the requestor is
            authorized to view.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The server cannot or will not process the request due to something
            that is perceived to be a client error such as malformed request syntax.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: List of consumer groups in the Kafka instance.
      tags:
      - groups
      x-accepts: application/json
    summary: API endpoints for consumer groups under a Kafka topic
  /consumer-groups/{consumerGroupId}/reset-offset:
    post:
      description: Reset the offset for a particular consumer group.
      operationId: resetConsumerGroupOffset
      parameters:
      - description: The ID of the consumer group.
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              ConsumerGroupOffsetResetExample:
                value:
                  topics:
                  - topic: my-topic
                    partitions:
                    - 0
                  offset: absolute
                  value: "4"
            schema:
              $ref: '#/components/schemas/ConsumerGroupResetOffsetParameters'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupResetOffsetResult'
          description: The consumer group offsets have been reset.
        "400":
          description: The consumer group to reset the offset does have active consumers.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden to delete this consumer group.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Specified topic or its partition does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Reset the offset for a consumer group.
      tags:
      - groups
      x-contentType: application/json
      x-accepts: application/json
  /acls:
    delete:
      description: Deletes ACL bindings that match the query parameters.
      operationId: deleteAcls
      parameters:
      - description: ACL Resource Type Filter
        examples:
          anything:
            summary: Match any ACL binding resource type
            value: ANY
          group:
            summary: Match ACL bindings for consumer groups
            value: GROUP
          topic:
            summary: Match ACL bindings for topics
            value: GROUP
          cluster:
            summary: Match ACL bindings for the cluster
            value: CLUSTER
          transactional_id:
            summary: Match ACL bindings for transactional IDs
            value: TRANSACTIONAL_ID
        explode: true
        in: query
        name: resourceType
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceTypeFilter'
        style: form
      - description: ACL Resource Name Filter
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: ACL Pattern Type Filter
        examples:
          anything:
            summary: Match any ACL binding pattern type
            value: ANY
          literal:
            summary: Match a literal resource name or `*`
            value: LITERAL
          prefixed:
            summary: Match a prefixed resource name
            value: PREFIXED
        explode: true
        in: query
        name: patternType
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternTypeFilter'
        style: form
      - description: |-
          ACL Principal Filter. Either a specific user or the wildcard user `User:*`
          may be provided.
          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
        examples:
          wildcard:
            summary: Match ACL entries that apply to all users
            value: User:*
          specific:
            summary: Match ACL entries for a specific user
            value: User:admin-5a1-0c1
        explode: true
        in: query
        name: principal
        required: false
        schema:
          $ref: '#/components/schemas/AclPrincipal'
        style: form
      - description: |-
          ACL Operation Filter. The ACL binding operation provided should be valid
          for the resource type in the request, if not `ANY`.
        examples:
          anything:
            summary: Match any ACL binding operation
            value: ANY
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperationFilter'
        style: form
      - description: ACL Permission Type Filter
        examples:
          anything:
            summary: Match any ACL binding permission type
            value: ANY
          allow:
            summary: Match only ACL bindings allowing access
            value: ALLOW
          deny:
            summary: Match only ACL bindings denying access
            value: DENY
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermissionTypeFilter'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of all ACL bindings matching the query parameters that
            were deleted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The client request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Delete ACL bindings
      tags:
      - acls
      x-accepts: application/json
    get:
      description: Returns a list of all of the available ACL bindings, or the list
        of bindings that meet the users URL Query Parameters. If no parameters are
        specified, all ACL bindings known to the system will be returned (with paging).
      operationId: getAcls
      parameters:
      - description: ACL Resource Type Filter
        examples:
          anything:
            summary: Match any ACL binding resource type
            value: ANY
          group:
            summary: Match ACL bindings for consumer groups
            value: GROUP
          topic:
            summary: Match ACL bindings for topics
            value: GROUP
          cluster:
            summary: Match ACL bindings for the cluster
            value: CLUSTER
          transactional_id:
            summary: Match ACL bindings for transactional IDs
            value: TRANSACTIONAL_ID
        explode: true
        in: query
        name: resourceType
        required: false
        schema:
          $ref: '#/components/schemas/AclResourceTypeFilter'
        style: form
      - description: ACL Resource Name Filter
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: ACL Pattern Type Filter
        examples:
          anything:
            summary: Match any ACL binding pattern type
            value: ANY
          literal:
            summary: Match a literal resource name or `*`
            value: LITERAL
          prefixed:
            summary: Match a prefixed resource name
            value: PREFIXED
        explode: true
        in: query
        name: patternType
        required: false
        schema:
          $ref: '#/components/schemas/AclPatternTypeFilter'
        style: form
      - description: |-
          ACL Principal Filter. Either a specific user or the wildcard user `User:*`
          may be provided.
          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
        examples:
          wildcard:
            summary: Match ACL entries that apply to all users
            value: User:*
          specific:
            summary: Match ACL entries for a specific user
            value: User:admin-5a1-0c1
        explode: true
        in: query
        name: principal
        required: false
        schema:
          $ref: '#/components/schemas/AclPrincipal'
        style: form
      - description: |-
          ACL Operation Filter. The ACL binding operation provided should be valid
          for the resource type in the request, if not `ANY`.
        examples:
          anything:
            summary: Match any ACL binding operation
            value: ANY
        explode: true
        in: query
        name: operation
        required: false
        schema:
          $ref: '#/components/schemas/AclOperationFilter'
        style: form
      - description: ACL Permission Type Filter
        examples:
          anything:
            summary: Match any ACL binding permission type
            value: ANY
          allow:
            summary: Match only ACL bindings allowing access
            value: ALLOW
          deny:
            summary: Match only ACL bindings denying access
            value: DENY
        explode: true
        in: query
        name: permission
        required: false
        schema:
          $ref: '#/components/schemas/AclPermissionTypeFilter'
        style: form
      - description: Page number for result lists
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 1
          minimum: 1
          type: number
        style: form
      - description: Page size for result lists
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 10
          minimum: 1
          type: number
        style: form
      - description: Order of the ACL binding sorting.
        explode: true
        in: query
        name: order
        required: false
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
        style: form
      - description: Order key to sort the items by.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          default: permission
          enum:
          - resourceType
          - resourceName
          - patternType
          - principal
          - operation
          - permission
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of ACL bindings matching the query parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The client request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: List ACL bindings
      tags:
      - acls
      x-accepts: application/json
    post:
      description: Creates a new ACL binding for a Kafka instance.
      operationId: createAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclBinding'
        description: ACL to create.
        required: true
      responses:
        "201":
          description: ACL created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The client request was invalid
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Create ACL binding
      tags:
      - acls
      x-contentType: application/json
      x-accepts: application/json
  /acls/resource-operations:
    get:
      description: Retrieve the resources and associated operations that may have
        ACLs configured.
      operationId: getAclResourceOperations
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  summary: Map of resources to allowed ACL operations
                  value: |-
                    {
                        "cluster": [ "describe", "alter" ],
                        "group": [ "all", "delete", "describe", "read" ],
                        "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ],
                        "transactional_id": [ "all", "describe", "write" ]
                    }
                disabled:
                  summary: No configuration of ACL bindings is allowed
                  value: '{}'
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
          description: Map of allowed resources and operations for ACL creation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Retrieve allowed ACL resources and operations
      tags:
      - acls
      x-accepts: application/json
  /: {}
components:
  parameters:
    AclResourceTypeFilter:
      description: ACL Resource Type Filter
      examples:
        anything:
          summary: Match any ACL binding resource type
          value: ANY
        group:
          summary: Match ACL bindings for consumer groups
          value: GROUP
        topic:
          summary: Match ACL bindings for topics
          value: GROUP
        cluster:
          summary: Match ACL bindings for the cluster
          value: CLUSTER
        transactional_id:
          summary: Match ACL bindings for transactional IDs
          value: TRANSACTIONAL_ID
      explode: true
      in: query
      name: resourceType
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceTypeFilter'
      style: form
    AclResourceName:
      description: ACL Resource Name Filter
      explode: true
      in: query
      name: resourceName
      required: false
      schema:
        type: string
      style: form
    AclPatternTypeFilter:
      description: ACL Pattern Type Filter
      examples:
        anything:
          summary: Match any ACL binding pattern type
          value: ANY
        literal:
          summary: Match a literal resource name or `*`
          value: LITERAL
        prefixed:
          summary: Match a prefixed resource name
          value: PREFIXED
      explode: true
      in: query
      name: patternType
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternTypeFilter'
      style: form
    AclPrincipal:
      description: |-
        ACL Principal Filter. Either a specific user or the wildcard user `User:*`
        may be provided.
        - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
        - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
      examples:
        wildcard:
          summary: Match ACL entries that apply to all users
          value: User:*
        specific:
          summary: Match ACL entries for a specific user
          value: User:admin-5a1-0c1
      explode: true
      in: query
      name: principal
      required: false
      schema:
        $ref: '#/components/schemas/AclPrincipal'
      style: form
    AclOperationFilter:
      description: |-
        ACL Operation Filter. The ACL binding operation provided should be valid
        for the resource type in the request, if not `ANY`.
      examples:
        anything:
          summary: Match any ACL binding operation
          value: ANY
      explode: true
      in: query
      name: operation
      required: false
      schema:
        $ref: '#/components/schemas/AclOperationFilter'
      style: form
    AclPermissionTypeFilter:
      description: ACL Permission Type Filter
      examples:
        anything:
          summary: Match any ACL binding permission type
          value: ANY
        allow:
          summary: Match only ACL bindings allowing access
          value: ALLOW
        deny:
          summary: Match only ACL bindings denying access
          value: DENY
      explode: true
      in: query
      name: permission
      required: false
      schema:
        $ref: '#/components/schemas/AclPermissionTypeFilter'
      style: form
    PageNumber:
      description: Page number for result lists
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 1
        minimum: 1
        type: number
      style: form
    PageSize:
      description: Page size for result lists
      explode: true
      in: query
      name: size
      required: false
      schema:
        default: 10
        minimum: 1
        type: number
      style: form
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The client request was invalid
    NotAuthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Request authentication missing or invalid
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: User is not authorized to access requested resource
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The resource already exists.
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error
    ServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Kafka service unavailable
  schemas:
    AclBinding:
      description: Represents a binding between a resource pattern and an access control
        entry
      example:
        resourceType: TOPIC
        resourceName: '*'
        patternType: LITERAL
        principal: User:user123
        operation: READ
        permission: ALLOW
      properties:
        resourceType:
          $ref: '#/components/schemas/AclResourceType'
        resourceName:
          type: string
        patternType:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          description: Identifies the user or service account to which an ACL entry
            is bound. The literal prefix value of `User:` is required. May be used
            to specify all users with value `User:*`.
          example: User:user-123-abc
          nullable: false
          pattern: ^User:(\*|[a-zA-Z0-9_@.-]+)$
          title: ACL Principal
          type: string
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermissionType'
      required:
      - operation
      - patternType
      - permission
      - principal
      - resourceName
      - resourceType
      title: ACL Binding
      type: object
    AclBindingList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/AclBinding'
          type: array
      type: object
    AclBindingListPage:
      allOf:
      - $ref: '#/components/schemas/AclBindingList'
      - $ref: '#/components/schemas/ResultListPage'
      description: A page of ACL binding entries
      title: ACL Binding List Page
      type: object
    AclResourceType:
      enum:
      - GROUP
      - TOPIC
      - CLUSTER
      - TRANSACTIONAL_ID
      nullable: false
      title: ACL Resource Type
      type: string
    AclResourceTypeFilter:
      default: ANY
      enum:
      - ANY
      - GROUP
      - TOPIC
      - CLUSTER
      - TRANSACTIONAL_ID
      title: ACL Resource Type Filter
      type: string
    AclPatternType:
      enum:
      - LITERAL
      - PREFIXED
      nullable: false
      title: ACL Pattern Type
      type: string
    AclPatternTypeFilter:
      default: ANY
      description: Use value 'MATCH' to perform pattern matching.
      enum:
      - LITERAL
      - PREFIXED
      - ANY
      - MATCH
      title: ACL Pattern Type Filter
      type: string
    AclOperation:
      enum:
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      nullable: false
      title: ACL Operation
      type: string
    AclOperationFilter:
      default: ANY
      enum:
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      - ANY
      title: ACL Operation Filter
      type: string
    AclPermissionType:
      enum:
      - ALLOW
      - DENY
      nullable: false
      title: ACL Permission Type
      type: string
    AclPermissionTypeFilter:
      default: ANY
      enum:
      - ALLOW
      - DENY
      - ANY
      title: ACL Permission Type Filter
      type: string
    AclPrincipal:
      description: Identifies the user or service account to which an ACL entry is
        bound. The literal prefix value of `User:` is required. May be used to specify
        all users with value `User:*`.
      example: User:user-123-abc
      nullable: false
      pattern: ^User:(\*|[a-zA-Z0-9_@.-]+)$
      title: ACL Principal
      type: string
    Topic:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        name: my-topic
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
        partitions:
        - id: 0
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 0
        - id: 1
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 1
      properties:
        name:
          description: The name of the topic.
          type: string
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
        partitions:
          description: Partitions for this topic.
          items:
            $ref: '#/components/schemas/Partition'
          type: array
      title: Root Type for NewTopicInput
      type: object
    Partition:
      description: Kafka topic partition
      example:
        id: 0
        replicas:
        - id: 0
        - id: 1
        isr:
        - id: 0
        - id: 1
        leader:
          id: 1
      properties:
        partition:
          description: The partition id, unique among partitions of the same topic
          type: integer
        replicas:
          description: List of replicas for the partition
          items:
            $ref: '#/components/schemas/Node'
          type: array
        isr:
          description: List in-sync replicas for this partition.
          items:
            $ref: '#/components/schemas/Node'
          type: array
        leader:
          description: Kafka server / broker.
          type: object
      required:
      - partition
      type: object
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a
        topic.
      example:
        key: min.insync.replicas
        value: "1"
      properties:
        key:
          description: The key indicating what configuration entry you would like
            to set for the topic.
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          type: string
      type: object
    TopicsList:
      description: A list of topics.
      example:
        items:
        - name: my-topic
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
          partitions:
          - id: 0
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 1
        offset: 25
        limit: 90
        count: 94
      properties:
        page:
          description: The page
          type: integer
        size:
          description: number of entries per page
          type: integer
        total:
          description: Total number of topics
          type: integer
        items:
          description: List of topics
          items:
            $ref: '#/components/schemas/Topic'
          type: array
      type: object
    TopicSettings:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        numPartitions: 2
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        numPartitions:
          description: Number of partitions for this topic.
          type: integer
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
      required:
      - numPartitions
      title: Root Type for NewTopicInput
      type: object
    Node:
      description: Kafka server / broker.
      type: object
    NewTopicInput:
      description: Input object to create a new topic.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
      properties:
        name:
          description: The topic name, this value must be unique.
          type: string
        settings:
          $ref: '#/components/schemas/TopicSettings'
      required:
      - name
      - settings
      type: object
    ConsumerGroup:
      description: A group of Kafka consumers
      example:
        id: consumer_group_1
        consumers:
        - groupId: consumer_group_1
          topic: topic-1
          partition: 0
          memberId: consumer_group_member1
          offset: 5
          lag: 0
          logEndOffset: 5
        - groupId: consumer_group_1
          topic: topic-1
          partition: 1
          memberId: consumer_group_member2
          offset: 3
          lag: 0
          logEndOffset: 3
        - groupId: consumer_group_1
          topic: topic-1
          partition: 2
          memberId: consumer_group_member3
          offset: 6
          lag: 1
          logEndOffset: 5
      properties:
        groupId:
          description: Unique identifier for the consumer group
          type: string
        state:
          enum:
          - STABLE
          - DEAD
          - EMPTY
          - COMPLETING_REBALANCE
          - PREPARING_REBALANCE
          - UNKNOWN
          type: string
        consumers:
          description: The list of consumers associated with this consumer group
          items:
            $ref: '#/components/schemas/Consumer'
          type: array
      required:
      - consumers
      - groupId
      type: object
    Consumer:
      description: A Kafka consumer is responsible for reading records from one or
        more topics and one or more partitions of a topic.
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
      properties:
        groupId:
          description: Unique identifier for the consumer group to which this consumer
            belongs.
          type: string
        topic:
          description: The unique topic name to which this consumer belongs
          type: string
        partition:
          description: The partition number to which this consumer group is assigned
            to.
          type: integer
        offset:
          description: Offset denotes the position of the consumer in a partition.
          type: number
        logEndOffset:
          description: The log end offset is the offset of the last message written
            to a log.
          type: number
        lag:
          description: Offset Lag is the delta between the last produced message and
            the last consumer's committed offset.
          type: integer
        memberId:
          description: The member ID is a unique identifier given to a consumer by
            the coordinator upon initially joining the group.
          type: string
      required:
      - groupId
      - lag
      - offset
      - partition
      - topic
      type: object
    ConsumerGroupList:
      description: A list of consumer groups
      example:
        count: 1
        limit: 10
        offset: 0
        items:
        - groupId: consumer_group_1
          consumers:
          - groupId: consumer_group_1
            topic: topic-1
            partition: 0
            memberId: consumer_group_member1
            offset: 5
            lag: 0
            logEndOffset: 5
          - groupId: consumer_group_1
            topic: topic-1
            partition: 1
            memberId: consumer_group_member2
            offset: 3
            lag: 0
            logEndOffset: 3
          - groupId: consumer_group_1
            topic: topic-1
            partition: 2
            memberId: consumer_group_member3
            offset: 6
            lag: 1
            logEndOffset: 5
      properties:
        items:
          description: Consumer group list items
          items:
            $ref: '#/components/schemas/ConsumerGroup'
          type: array
        total:
          description: The total number of consumer groups.
          type: number
        size:
          description: The number of consumer groups per page.
          type: number
        page:
          description: The page
          type: integer
      type: object
    UpdateTopicInput:
      description: Kafka Topic (A feed where records are stored and published)
      example:
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        config:
          description: Topic configuration entries.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
        numPartitions:
          description: Number of partitions (only increasing supported)
          type: integer
      title: Root Type for UpdateTopicInput
      type: object
    ConsumerGroupResetOffsetParameters:
      example:
        topics:
        - topic: my-topic
          partitions:
          - 0
        offset: absolute
        value: "4"
      properties:
        value:
          type: string
        offset:
          enum:
          - timestamp
          - absolute
          - latest
          - earliest
          type: string
        topics:
          items:
            $ref: '#/components/schemas/TopicsToResetOffset'
          type: array
      required:
      - offset
      title: Root Type for ConsumerGroupResetOffsetParameters
      type: object
    TopicsToResetOffset:
      example:
        topic: foo
        partitions:
        - 0
        - 1
        - 2
      properties:
        topic:
          type: string
        partitions:
          items:
            format: int32
            type: integer
          type: array
      required:
      - topic
      title: Root Type for TopicsToResetOffset
      type: object
    ConsumerGroupResetOffsetResult:
      allOf:
      - $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItemList'
      - $ref: '#/components/schemas/ResultListPage'
      example:
        total: 2
        page: 1
        size: 10
        items:
        - topic: your-topic
          partition: 0
          offset: 4
        - topic: my-topic
          partition: 0
          offset: 0
      title: Root Type for ConsumerGroupResetOffsetResult
      type: object
    ConsumerGroupResetOffsetResultItemList:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItem'
          type: array
      type: object
    ConsumerGroupResetOffsetResultItem:
      example:
        topic: your-topic
        partition: 0
        offset: 4
      properties:
        topic:
          type: string
        partition:
          format: int32
          type: integer
        offset:
          format: int32
          type: integer
      type: object
    ResultListPage:
      properties:
        total:
          description: Total number of entries in the full result set
          type: number
        page:
          description: Current page number (returned for fetch requests)
          type: integer
        size:
          description: Number of entries per page (returned for fetch requests)
          type: number
      required:
      - total
      type: object
    Error:
      description: General error response
      properties:
        code:
          format: int32
          type: integer
        error_message:
          type: string
        class:
          type: string
      type: object
  securitySchemes:
    Bearer:
      description: Access token used with OAuth 2.0
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /token
      type: oauth2

