openapi: 3.0.3
info:
  description: An API to provide REST endpoints for query Kafka for admin operations
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: Kafka Admin REST API
  version: 0.11.0
servers:
- description: Kafka Admin REST API
  url: /
security:
- Bearer: []
tags:
- description: Topic Management
  name: topics
- description: Consumer Group Management
  name: groups
- description: Access Control Management (ACLs)
  name: acls
- description: Send and receive records interactively
  name: records
- description: Error Type Retrieval
  name: errors
paths:
  /api/v1/topics:
    get:
      description: Returns a list of all of the available topics, or the list of topics
        that meet the request query parameters. The topics returned are limited to
        those records the requestor is authorized to view.
      operationId: getTopics
      parameters:
      - deprecated: true
        description: Maximum number of records to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Filter to apply when returning the list of topics
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Order items are sorted
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/SortDirection'
        style: form
      - description: Order key to sort the topics by.
        explode: true
        in: query
        name: orderKey
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/TopicOrderKey'
          - {}
        style: form
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicsList'
          description: List of topics matching the request query parameters. The topics
            returned are limited to those records the requestor is authorized to view.
      summary: Retrieves a list of topics
      tags:
      - topics
      x-accepts: application/json
    post:
      description: Creates a new topic for Kafka.
      operationId: createTopic
      requestBody:
        content:
          application/json:
            examples:
              NewTopicExample:
                $ref: '#/components/examples/NewTopicExample'
            schema:
              $ref: '#/components/schemas/NewTopicInput'
        description: Topic to create.
        required: true
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The resource already exists.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic created successfully.
      summary: Creates a new topic
      tags:
      - topics
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/topics/{topicName}:
    delete:
      description: Deletes the topic with the specified name.
      operationId: deleteTopic
      parameters:
      - description: Name of the topic to delete
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Topic deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Deletes a topic
      tags:
      - topics
      x-accepts: application/json
    get:
      description: Topic
      operationId: getTopic
      parameters:
      - description: Name of the topic to describe
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Kafka topic details
      summary: Retrieves a single topic
      tags:
      - topics
      x-accepts: application/json
    patch:
      description: Update the configuration settings for a topic.
      operationId: updateTopic
      parameters:
      - description: Name of the topic to update
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicSettings'
        required: true
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
          description: Topic updated successfully.
      summary: Updates a single topic
      tags:
      - topics
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/topics/{topicName}/records:
    get:
      description: Consume a limited number of records from a topic, optionally specifying
        a partition and an absolute offset or timestamp as the starting point for
        message retrieval.
      operationId: consumeRecords
      parameters:
      - description: List of properties to include for each record in the response
        explode: false
        in: query
        name: include
        required: false
        schema:
          items:
            $ref: '#/components/schemas/RecordIncludedProperty'
          type: array
        style: form
      - description: Limit the number of records fetched and returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Maximum length of string values returned in the response. Values
          with a length that exceeds this parameter will be truncated. When this parameter
          is not included in the request, the full string values will be returned.
        explode: true
        in: query
        name: maxValueLength
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Retrieve messages with an offset equal to or greater than this
          offset. If both `timestamp` and `offset` are requested, `timestamp` is given
          preference.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          format: int32
          minimum: 0
          type: integer
        style: form
      - description: Retrieve messages only from this partition
        explode: true
        in: query
        name: partition
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Retrieve messages with a timestamp equal to or later than this
          timestamp. If both `timestamp` and `offset` are requested, `timestamp` is
          given preference.
        explode: true
        in: query
        name: timestamp
        required: false
        schema:
          format: date-time
        style: form
      - description: Topic name
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordList'
          description: List of records matching the request query parameters.
      summary: Consume records from a topic
      tags:
      - records
      x-accepts: application/json
    post:
      description: Produce (write) a single record to a topic.
      operationId: produceRecord
      parameters:
      - description: Topic name
        explode: false
        in: path
        name: topicName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              RecordProduceExample:
                $ref: '#/components/examples/RecordProduceExample'
            schema:
              $ref: '#/components/schemas/Record'
        required: true
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
          description: Record was successfully sent to the topic
      summary: Send a record to a topic
      tags:
      - records
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/consumer-groups:
    get:
      description: Returns a list of all consumer groups for a particular Kafka instance.
        The consumer groups returned are limited to those records the requestor is
        authorized to view.
      operationId: getConsumerGroups
      parameters:
      - deprecated: true
        description: Maximum number of records to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Return consumer groups where the topic name contains this value
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      - description: Return the consumer groups where the ID contains this value
        explode: true
        in: query
        name: group-id-filter
        required: false
        schema:
          type: string
        style: form
      - description: Order items are sorted
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/SortDirection'
        style: form
      - explode: true
        in: query
        name: orderKey
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/ConsumerGroupOrderKey'
          - {}
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                List of consumer groups:
                  value:
                    kind: ConsumerGroupList
                    count: 1
                    limit: 10
                    offset: 0
                    items:
                    - id: consumer_group_1
                      kind: ConsumerGroup
                      href: /api/v1/consumer-groups/consumer_group_1
                      groupId: consumer_group_1
                      consumers:
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 0
                        memberId: consumer_group_member1
                        offset: 5
                        lag: 0
                        logEndOffset: 5
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 1
                        memberId: consumer_group_member2
                        offset: 3
                        lag: 0
                        logEndOffset: 3
                      - groupId: consumer_group_1
                        topic: topic-1
                        partition: 2
                        memberId: consumer_group_member3
                        offset: 6
                        lag: 1
                        logEndOffset: 5
              schema:
                $ref: '#/components/schemas/ConsumerGroupList'
          description: List of consumer groups matching the request parameters. The
            consumer groups returned are limited to those records the requestor is
            authorized to view.
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: List of consumer groups in the Kafka instance.
      tags:
      - groups
      x-accepts: application/json
  /api/v1/consumer-groups/{consumerGroupId}:
    delete:
      description: Delete a consumer group, along with its consumers.
      operationId: deleteConsumerGroupById
      parameters:
      - description: Consumer group identifier
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: The consumer group was deleted successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "423":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User cannot delete consumer group with active members.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Delete a consumer group.
      tags:
      - groups
      x-accepts: application/json
    get:
      operationId: getConsumerGroupById
      parameters:
      - description: Consumer group identifier
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      - description: Order items are sorted
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/SortDirection'
        style: form
      - explode: true
        in: query
        name: orderKey
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/ConsumerGroupDescriptionOrderKey'
          - {}
        style: form
      - description: Value of partition to include. Value -1 means filter is not active.
        explode: true
        in: query
        name: partitionFilter
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Filter consumer groups for a specific topic
        explode: true
        in: query
        name: topic
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                ConsumerGroupExample:
                  $ref: '#/components/examples/ConsumerGroupExample'
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
          description: Consumer group details.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Get a single consumer group by its unique ID.
      tags:
      - groups
      x-accepts: application/json
  /api/v1/consumer-groups/{consumerGroupId}/reset-offset:
    post:
      description: Reset the offset for a particular consumer group.
      operationId: resetConsumerGroupOffset
      parameters:
      - description: Consumer group identifier
        explode: false
        in: path
        name: consumerGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              ConsumerGroupOffsetResetExample:
                $ref: '#/components/examples/ConsumerGroupOffsetResetExample'
            schema:
              $ref: '#/components/schemas/ConsumerGroupResetOffsetParameters'
        required: true
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroupResetOffsetResult'
          description: The consumer group offsets have been reset.
      summary: Reset the offset for a consumer group.
      tags:
      - groups
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/acls:
    delete:
      description: Deletes ACL bindings that match the query parameters.
      operationId: deleteAcls
      parameters:
      - description: ACL Resource Type Filter
        examples:
          anything:
            summary: Match any ACL binding resource type
            value: ANY
          group:
            summary: Match ACL bindings for consumer groups
            value: GROUP
          topic:
            summary: Match ACL bindings for topics
            value: TOPIC
          cluster:
            summary: Match ACL bindings for the cluster
            value: CLUSTER
          transactional_id:
            summary: Match ACL bindings for transactional IDs
            value: TRANSACTIONAL_ID
        explode: true
        in: query
        name: resourceType
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclResourceTypeFilter'
          - {}
        style: form
      - description: ACL Resource Name Filter
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: ACL Pattern Type Filter
        examples:
          anything:
            summary: Match any ACL binding pattern type
            value: ANY
          literal:
            summary: Match a literal resource name or `*`
            value: LITERAL
          prefixed:
            summary: Match a prefixed resource name
            value: PREFIXED
        explode: true
        in: query
        name: patternType
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclPatternTypeFilter'
          - {}
        style: form
      - description: |-
          ACL Principal Filter. Either a specific user or the wildcard user `User:*` may be provided.
          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
        examples:
          wildcard:
            summary: Match ACL entries that apply to all users
            value: User:*
          specific:
            summary: Match ACL entries for a specific user
            value: User:admin-5a1-0c1
        explode: true
        in: query
        name: principal
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ACL Operation Filter. The ACL binding operation provided should
          be valid for the resource type in the request, if not `ANY`.
        examples:
          anything:
            summary: Match any ACL binding operation
            value: ANY
        explode: true
        in: query
        name: operation
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclOperationFilter'
          - {}
        style: form
      - description: ACL Permission Type Filter
        examples:
          anything:
            summary: Match any ACL binding permission type
            value: ANY
          allow:
            summary: Match only ACL bindings allowing access
            value: ALLOW
          deny:
            summary: Match only ACL bindings denying access
            value: DENY
        explode: true
        in: query
        name: permission
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclPermissionTypeFilter'
          - {}
        style: form
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of all ACL bindings matching the query parameters that
            were deleted.
      summary: Delete ACL bindings
      tags:
      - acls
      x-accepts: application/json
    get:
      description: Returns a list of all of the available ACL bindings, or the list
        of bindings that meet the user's URL query parameters. If no parameters are
        specified, all ACL bindings known to the system will be returned (with paging).
      operationId: getAcls
      parameters:
      - description: ACL Resource Type Filter
        examples:
          anything:
            summary: Match any ACL binding resource type
            value: ANY
          group:
            summary: Match ACL bindings for consumer groups
            value: GROUP
          topic:
            summary: Match ACL bindings for topics
            value: TOPIC
          cluster:
            summary: Match ACL bindings for the cluster
            value: CLUSTER
          transactional_id:
            summary: Match ACL bindings for transactional IDs
            value: TRANSACTIONAL_ID
        explode: true
        in: query
        name: resourceType
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclResourceTypeFilter'
          - {}
        style: form
      - description: ACL Resource Name Filter
        explode: true
        in: query
        name: resourceName
        required: false
        schema:
          type: string
        style: form
      - description: ACL Pattern Type Filter
        examples:
          anything:
            summary: Match any ACL binding pattern type
            value: ANY
          literal:
            summary: Match a literal resource name or `*`
            value: LITERAL
          prefixed:
            summary: Match a prefixed resource name
            value: PREFIXED
        explode: true
        in: query
        name: patternType
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclPatternTypeFilter'
          - {}
        style: form
      - description: |-
          ACL Principal Filter. Either a specific user or the wildcard user `User:*` may be provided.
          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.
          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.
        examples:
          wildcard:
            summary: Match ACL entries that apply to all users
            value: User:*
          specific:
            summary: Match ACL entries for a specific user
            value: User:admin-5a1-0c1
        explode: true
        in: query
        name: principal
        required: false
        schema:
          default: ""
          type: string
        style: form
      - description: ACL Operation Filter. The ACL binding operation provided should
          be valid for the resource type in the request, if not `ANY`.
        examples:
          anything:
            summary: Match any ACL binding operation
            value: ANY
        explode: true
        in: query
        name: operation
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclOperationFilter'
          - {}
        style: form
      - description: ACL Permission Type Filter
        examples:
          anything:
            summary: Match any ACL binding permission type
            value: ANY
          allow:
            summary: Match only ACL bindings allowing access
            value: ALLOW
          deny:
            summary: Match only ACL bindings denying access
            value: DENY
        explode: true
        in: query
        name: permission
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclPermissionTypeFilter'
          - {}
        style: form
      - description: Page number
        explode: true
        in: query
        name: page
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Number of records per page
        explode: true
        in: query
        name: size
        required: false
        schema:
          format: int32
          minimum: 1
          type: integer
        style: form
      - description: Order items are sorted
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/SortDirection'
        style: form
      - explode: true
        in: query
        name: orderKey
        required: false
        schema:
          allOf:
          - $ref: '#/components/schemas/AclBindingOrderKey'
          - {}
        style: form
      responses:
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AclBindingListPage'
          description: List of ACL bindings matching the query parameters.
      summary: List ACL bindings
      tags:
      - acls
      x-accepts: application/json
    post:
      description: Creates a new ACL binding for a Kafka instance.
      operationId: createAcl
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclBinding'
        description: ACL to create.
        required: true
      responses:
        "201":
          description: ACL created successfully.
        "400":
          content:
            application/json:
              examples:
                badrequest:
                  summary: Invalid query parameter
                  value:
                    code: 400
                    error_message: Invalid parameter value
              schema:
                $ref: '#/components/schemas/Error'
          description: |-
            The client request was invalid. One or more request parameters or the request
            body was rejected. Additional information may be found in the response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: User is not authorized to access requested resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Kafka service unavailable
      summary: Create ACL binding
      tags:
      - acls
      x-contentType: application/json
      x-accepts: application/json
  /api/v1/acls/resource-operations:
    get:
      description: Retrieve the resources and associated operations that may have
        ACLs configured.
      operationId: getAclResourceOperations
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  summary: Map of resources to allowed ACL operations
                  value: |-
                    {
                        "cluster": [ "describe", "alter" ],
                        "group": [ "all", "delete", "describe", "read" ],
                        "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ],
                        "transactional_id": [ "all", "describe", "write" ]
                    }
                disabled:
                  summary: No configuration of ACL bindings is allowed
                  value: '{}'
              schema:
                additionalProperties:
                  items:
                    type: string
                  type: array
                type: object
          description: Map of allowed resources and operations for ACL creation
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Request authentication missing or invalid
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      security:
      - {}
      summary: Retrieve allowed ACL resources and operations
      tags:
      - acls
      x-accepts: application/json
  /api/v1/errors:
    get:
      operationId: getErrors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorList'
          description: Error listing
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      security:
      - {}
      summary: Get list of errors
      tags:
      - errors
      x-accepts: application/json
  /api/v1/errors/{errorId}:
    get:
      operationId: getError
      parameters:
      - description: Error identifier
        explode: false
        in: path
        name: errorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Error details
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource could not be found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      security:
      - {}
      summary: Get an error by its unique ID
      tags:
      - errors
      x-accepts: application/json
components:
  examples:
    NewTopicExample:
      description: Sample new topic with 3 partitions
      value:
        name: my-topic
        settings:
          numPartitions: 3
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
    ConsumerGroupExample:
      description: Sample consumer group with 3 partitions and 3 active consumers
      value:
        id: consumer_group_1
        kind: ConsumerGroup
        href: /api/v1/consumer-groups/consumer_group_1
        groupId: consumer_group_1
        state: STABLE
        consumers:
        - groupId: consumer_group_1
          topic: topic-1
          partition: 0
          offset: 5
          logEndOffset: 5
          lag: 0
          memberId: consumer_group_member1
        - groupId: consumer_group_1
          topic: topic-1
          partition: 1
          offset: 3
          logEndOffset: 3
          lag: 0
          memberId: consumer_group_member2
        - groupId: consumer_group_1
          topic: topic-1
          partition: 2
          offset: 5
          logEndOffset: 6
          lag: 1
          memberId: consumer_group_member3
        metrics:
          laggingPartitions: 0
          activeConsumers: 3
          unassignedPartitions: 0
    ConsumerGroupOffsetResetExample:
      description: Sample request to reset partition `0` of topic `my-topic` to offset
        `4`
      value:
        offset: absolute
        value: "4"
        topics:
        - topic: my-topic
          partitions:
          - 0
    RecordProduceExample:
      description: Sample record to produce a record to partition 1, including a custom
        header
      value:
        kind: Record
        partition: 1
        headers:
          X-Custom-Header: header-value-1
        value: '{ "examplekey": "example-value" }'
  responses:
    BadRequest:
      content:
        application/json:
          examples:
            badrequest:
              summary: Invalid query parameter
              value:
                code: 400
                error_message: Invalid parameter value
          schema:
            $ref: '#/components/schemas/Error'
      description: |-
        The client request was invalid. One or more request parameters or the request
        body was rejected. Additional information may be found in the response.
    NotAuthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Request authentication missing or invalid
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: User is not authorized to access requested resource
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The requested resource could not be found.
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The resource already exists.
    ServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error
    ServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Kafka service unavailable
  schemas:
    AclBinding:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ACL_Binding'
      example:
        kind: AclBinding
        resourceType: TOPIC
        resourceName: '*'
        patternType: LITERAL
        principal: User:user123
        operation: READ
        permission: ALLOW
    AclBindingListPage:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ACL_Binding_List'
    AclBindingOrderKey:
      enum:
      - resourceType
      - resourceName
      - patternType
      - principal
      - operation
      - permission
      title: ACL Binding Order Key
      type: string
    AclOperation:
      enum:
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      nullable: false
      title: ACL Operation
      type: string
    AclOperationFilter:
      enum:
      - ALL
      - READ
      - WRITE
      - CREATE
      - DELETE
      - ALTER
      - DESCRIBE
      - DESCRIBE_CONFIGS
      - ALTER_CONFIGS
      - ANY
      title: ACL Operation Filter
      type: string
    AclPatternType:
      enum:
      - LITERAL
      - PREFIXED
      nullable: false
      title: ACL Pattern Type
      type: string
    AclPatternTypeFilter:
      description: Use value 'MATCH' to perform pattern matching.
      enum:
      - LITERAL
      - PREFIXED
      - ANY
      - MATCH
      title: ACL Pattern Type Filter
      type: string
    AclPermissionType:
      enum:
      - ALLOW
      - DENY
      nullable: false
      title: ACL Permission Type
      type: string
    AclPermissionTypeFilter:
      enum:
      - ALLOW
      - DENY
      - ANY
      title: ACL Permission Type Filter
      type: string
    AclResourceType:
      enum:
      - GROUP
      - TOPIC
      - CLUSTER
      - TRANSACTIONAL_ID
      nullable: false
      title: ACL Resource Type
      type: string
    AclResourceTypeFilter:
      enum:
      - ANY
      - GROUP
      - TOPIC
      - CLUSTER
      - TRANSACTIONAL_ID
      title: ACL Resource Type Filter
      type: string
    ConfigEntry:
      description: Key value pair indicating possible configuration options for a
        topic.
      example:
        key: min.insync.replicas
        value: "1"
      properties:
        key:
          description: The key indicating what configuration entry you would like
            to set for the topic.
          nullable: false
          pattern: \S
          type: string
        value:
          description: Value to indicate the setting on the topic configuration entry.
          nullable: false
          pattern: \S
          type: string
      required:
      - key
      - value
      type: object
    Consumer:
      description: A Kafka consumer is responsible for reading records from one or
        more topics and one or more partitions of a topic.
      example:
        groupId: consumer_group_1
        topic: topic-1
        partition: 0
        memberId: consumer_group_1-0
        offset: 5
        lag: 0
        logEndOffset: 5
      properties:
        groupId:
          description: Unique identifier for the consumer group to which this consumer
            belongs.
          nullable: false
          type: string
        topic:
          description: The unique topic name to which this consumer belongs
          nullable: false
          type: string
        partition:
          description: The partition number to which this consumer group is assigned
            to.
          format: int32
          nullable: false
          type: integer
        offset:
          description: Offset denotes the position of the consumer in a partition.
          format: int64
          type: integer
        logEndOffset:
          description: The log end offset is the offset of the last message written
            to a log.
          format: int64
          type: integer
        lag:
          description: Offset Lag is the delta between the last produced message and
            the last consumer's committed offset.
          format: int64
          type: integer
        memberId:
          description: The member ID is a unique identifier given to a consumer by
            the coordinator upon initially joining the group.
          type: string
      required:
      - groupId
      - lag
      - offset
      - partition
      - topic
      type: object
    ConsumerGroup:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConsumerGroup_allOf'
    ConsumerGroupDescriptionOrderKey:
      enum:
      - offset
      - endOffset
      - lag
      - partition
      type: string
    ConsumerGroupList:
      allOf:
      - $ref: '#/components/schemas/ListDeprecated'
      - $ref: '#/components/schemas/ConsumerGroup_List'
      example:
        kind: ConsumerGroupList
        count: 1
        limit: 10
        offset: 0
        items:
        - id: consumer_group_1
          kind: ConsumerGroup
          href: /api/v1/consumer-groups/consumer_group_1
          groupId: consumer_group_1
          consumers:
          - groupId: consumer_group_1
            topic: topic-1
            partition: 0
            memberId: consumer_group_member1
            offset: 5
            lag: 0
            logEndOffset: 5
          - groupId: consumer_group_1
            topic: topic-1
            partition: 1
            memberId: consumer_group_member2
            offset: 3
            lag: 0
            logEndOffset: 3
          - groupId: consumer_group_1
            topic: topic-1
            partition: 2
            memberId: consumer_group_member3
            offset: 6
            lag: 1
            logEndOffset: 5
    ConsumerGroupMetrics:
      properties:
        laggingPartitions:
          format: int32
          type: integer
        activeConsumers:
          format: int32
          type: integer
        unassignedPartitions:
          format: int32
          type: integer
      type: object
    ConsumerGroupOrderKey:
      enum:
      - name
      type: string
    ConsumerGroupResetOffsetParameters:
      example:
        offset: ""
        topics:
        - partitions:
          - 0
          - 0
          topic: topic
        - partitions:
          - 0
          - 0
          topic: topic
        value: value
      properties:
        offset:
          allOf:
          - $ref: '#/components/schemas/OffsetType'
          - nullable: false
        value:
          description: Value associated with the given `offset`. Not used for `offset`
            values `earliest` and `latest`. When `offset` is `timestamp` then `value`
            must be a valid timestamp representing the point in time to reset the
            consumer group. When `offset` is `absolute` then `value` must be the integer
            offset to which the consumer group will be reset.
          type: string
        topics:
          items:
            $ref: '#/components/schemas/TopicsToResetOffset'
          type: array
      required:
      - offset
      title: Root Type for ConsumerGroupResetOffsetParameters
      type: object
    ConsumerGroupResetOffsetResult:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/Root_Type_for_ConsumerGroupResetOffsetResult'
      example:
        total: 2
        page: 1
        size: 10
        items:
        - topic: your-topic
          partition: 0
          offset: 4
        - topic: my-topic
          partition: 0
          offset: 0
    ConsumerGroupResetOffsetResultItem:
      example:
        topic: your-topic
        partition: 0
        offset: 4
      properties:
        topic:
          type: string
        partition:
          format: int32
          type: integer
        offset:
          format: int64
          type: integer
      type: object
    ConsumerGroupState:
      enum:
      - UNKNOWN
      - PREPARING_REBALANCE
      - COMPLETING_REBALANCE
      - STABLE
      - DEAD
      - EMPTY
      type: string
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ErrorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/Error_List'
    List:
      properties:
        kind:
          type: string
        items:
          items:
            type: object
          nullable: false
          type: array
        total:
          description: Total number of entries in the full result set
          format: int32
          nullable: false
          type: integer
        size:
          description: Number of entries per page (returned for fetch requests)
          format: int32
          type: integer
        page:
          description: Current page number (returned for fetch requests)
          format: int32
          type: integer
      required:
      - items
      - total
      type: object
    ListDeprecated:
      allOf:
      - $ref: '#/components/schemas/List'
      - properties: {}
        type: object
    NewTopicInput:
      description: Input object to create a new topic.
      example:
        name: my-topic
        settings:
          numPartitions: 3
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
      properties:
        name:
          description: The topic name, this value must be unique.
          nullable: false
          pattern: \S
          type: string
        settings:
          allOf:
          - $ref: '#/components/schemas/TopicSettings'
          - nullable: false
      required:
      - name
      - settings
      type: object
    Node:
      description: Identifier for a Kafka server / broker.
      properties:
        id:
          format: int32
          type: integer
      type: object
    ObjectReference:
      properties:
        id:
          description: Unique identifier for the object. Not supported for all object
            kinds.
          type: string
        kind:
          nullable: false
          readOnly: true
          type: string
        href:
          description: Link path to request the object. Not supported for all object
            kinds.
          type: string
      required:
      - kind
      type: object
    OffsetType:
      enum:
      - timestamp
      - absolute
      - latest
      - earliest
      type: string
    Partition:
      description: Kafka topic partition
      example:
        id: 0
        replicas:
        - id: 0
        - id: 1
        isr:
        - id: 0
        - id: 1
        leader:
          id: 1
      properties:
        partition:
          description: The partition id, unique among partitions of the same topic
          format: int32
          nullable: false
          type: integer
        replicas:
          description: List of replicas for the partition
          items:
            $ref: '#/components/schemas/Node'
          type: array
        isr:
          description: List in-sync replicas for this partition.
          items:
            $ref: '#/components/schemas/Node'
          type: array
        leader:
          allOf:
          - $ref: '#/components/schemas/Node'
          - description: Node that is the leader for this partition.
      required:
      - partition
      type: object
    Record:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Record_1'
    RecordIncludedProperty:
      enum:
      - partition
      - offset
      - timestamp
      - timestampType
      - headers
      - key
      - value
      type: string
    RecordList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/Record_List'
    SortDirection:
      enum:
      - asc
      - desc
      type: string
    Topic:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Topic_1'
      example:
        id: my-topic
        kind: Topic
        href: /api/v1/topics/my-topic
        name: my-topic
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
        partitions:
        - id: 0
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 0
        - id: 1
          replicas:
          - id: 0
          - id: 1
          isr:
          - id: 0
          - id: 1
          leader:
            id: 1
    TopicOrderKey:
      enum:
      - name
      - partitions
      - retention.ms
      - retention.bytes
      type: string
    TopicSettings:
      description: The settings that are applicable to this topic. This includes partitions,
        configuration information, and number of replicas.
      example:
        numPartitions: 2
        config:
        - key: min.insync.replicas
          value: "1"
        - key: max.message.bytes
          value: "1050000"
      properties:
        numPartitions:
          description: Number of partitions for this topic. If not specified, the
            default for new topics is `1`. Number of partitions may not be reduced
            when updating existing topics
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        config:
          description: Topic configuration entries.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
      title: Topic Settings
      type: object
    TopicsList:
      allOf:
      - $ref: '#/components/schemas/ListDeprecated'
      - $ref: '#/components/schemas/Topic_List'
      example:
        kind: TopicList
        items:
        - id: my-topic
          kind: Topic
          href: /api/v1/topics/my-topic
          name: my-topic
          config:
          - key: min.insync.replicas
            value: "1"
          - key: max.message.bytes
            value: "1050000"
          partitions:
          - id: 0
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 0
          - id: 1
            replicas:
            - id: 0
            - id: 1
            isr:
            - id: 0
            - id: 1
            leader:
              id: 1
        offset: 25
        limit: 90
        count: 94
    TopicsToResetOffset:
      example:
        partitions:
        - 0
        - 0
        topic: topic
      properties:
        topic:
          nullable: false
          type: string
        partitions:
          items:
            format: int32
            type: integer
          type: array
      required:
      - topic
      title: Root Type for TopicsToResetOffset
      type: object
    ACL_Binding:
      description: Represents a binding between a resource pattern and an access control
        entry
      properties:
        resourceType:
          $ref: '#/components/schemas/AclResourceType'
        resourceName:
          nullable: false
          pattern: \S
          type: string
        patternType:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          description: Identifies the user or service account to which an ACL entry
            is bound. The literal prefix value of `User:` is required. May be used
            to specify all users with value `User:*`.
          example: User:user-123-abc
          nullable: false
          pattern: \S
          title: ACL Principal
          type: string
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermissionType'
      required:
      - operation
      - patternType
      - permission
      - principal
      - resourceName
      - resourceType
      title: ACL Binding
      type: object
    ACL_Binding_List:
      description: A page of ACL binding entries
      properties:
        items:
          items:
            $ref: '#/components/schemas/AclBinding'
          type: array
      title: ACL Binding List
      type: object
    ConsumerGroup_allOf:
      description: A group of Kafka consumers
      properties:
        groupId:
          description: Unique identifier for the consumer group
          nullable: false
          pattern: \S
          type: string
        state:
          $ref: '#/components/schemas/ConsumerGroupState'
        consumers:
          description: The list of consumers associated with this consumer group
          items:
            $ref: '#/components/schemas/Consumer'
          nullable: false
          type: array
        metrics:
          $ref: '#/components/schemas/ConsumerGroupMetrics'
      required:
      - consumers
      - groupId
      type: object
    ConsumerGroup_List:
      description: A list of consumer groups
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConsumerGroup'
          type: array
      title: ConsumerGroup List
      type: object
    Root_Type_for_ConsumerGroupResetOffsetResult:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItem'
          type: array
      title: Root Type for ConsumerGroupResetOffsetResult
      type: object
    Error_allOf:
      description: General error response
      properties:
        reason:
          description: General reason for the error. Does not change between specific
            occurrences.
          type: string
        detail:
          description: Detail specific to an error occurrence. May be different depending
            on the condition(s) that trigger the error.
          type: string
        code:
          format: int32
          type: integer
      type: object
    Error_List:
      description: List of errors
      properties:
        items:
          items:
            $ref: '#/components/schemas/Error'
          type: array
        total:
          description: Total number of errors returned in this request
      title: Error List
      type: object
    Record_1:
      description: An individual record consumed from a topic or produced to a topic
      properties:
        partition:
          description: The record's partition within the topic
          format: int32
          type: integer
        offset:
          description: The record's offset within the topic partition
          format: int64
          readOnly: true
          type: integer
        timestamp:
          description: Timestamp associated with the record. The type is indicated
            by `timestampType`. When producing a record, this value will be used as
            the record's `CREATE_TIME`.
          format: date-time
          type: string
        timestampType:
          description: Type of timestamp associated with the record
          readOnly: true
          type: string
        headers:
          additionalProperties:
            type: string
          description: Record headers, key/value pairs
          type: object
        key:
          description: Record key
          type: string
        value:
          description: Record value
          nullable: false
          type: string
      required:
      - value
      title: Record
      type: object
    Record_List:
      description: A page of records consumed from a topic
      properties:
        items:
          items:
            $ref: '#/components/schemas/Record'
          type: array
        total:
          description: Total number of records returned in this request. This value
            does not indicate the total number of records in the topic.
        size:
          description: Not used
        page:
          description: Not used
      title: Record List
      type: object
    Topic_1:
      description: Kafka Topic (A feed where records are stored and published)
      properties:
        name:
          description: The name of the topic.
          type: string
        isInternal:
          type: boolean
        partitions:
          description: Partitions for this topic.
          items:
            $ref: '#/components/schemas/Partition'
          type: array
        config:
          description: Topic configuration entry.
          items:
            $ref: '#/components/schemas/ConfigEntry'
          type: array
      title: Topic
      type: object
    Topic_List:
      description: A list of topics.
      properties:
        items:
          items:
            $ref: '#/components/schemas/Topic'
          type: array
      title: Topic List
      type: object
  securitySchemes:
    Bearer:
      description: Access token used with OAuth 2.0
      flows:
        clientCredentials:
          scopes: {}
          tokenUrl: /token
      type: oauth2

