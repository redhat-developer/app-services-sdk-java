/*
 * Kafka Management API
 * Kafka Management API is a REST API to manage Kafka instances
 *
 * The version of the OpenAPI document: 1.14.0
 * Contact: rhosak-support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.kas.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * schema for a kafka instance type capacity in region
 */
@ApiModel(description = "schema for a kafka instance type capacity in region")
@JsonPropertyOrder({
  RegionCapacityListItem.JSON_PROPERTY_INSTANCE_TYPE,
  RegionCapacityListItem.JSON_PROPERTY_AVAILABLE_SIZES
})
@JsonTypeName("RegionCapacityListItem")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RegionCapacityListItem {
  public static final String JSON_PROPERTY_INSTANCE_TYPE = "instance_type";
  private String instanceType;

  public static final String JSON_PROPERTY_AVAILABLE_SIZES = "available_sizes";
  private List<String> availableSizes = new ArrayList<>();

  public RegionCapacityListItem() { 
  }

  public RegionCapacityListItem instanceType(String instanceType) {
    
    this.instanceType = instanceType;
    return this;
  }

   /**
   * kafka instance type
   * @return instanceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "kafka instance type")
  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInstanceType() {
    return instanceType;
  }


  @JsonProperty(JSON_PROPERTY_INSTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public RegionCapacityListItem availableSizes(List<String> availableSizes) {
    
    this.availableSizes = availableSizes;
    return this;
  }

  public RegionCapacityListItem addAvailableSizesItem(String availableSizesItem) {
    this.availableSizes.add(availableSizesItem);
    return this;
  }

   /**
   * list of available Kafka instance sizes that can be created in this region when taking account current capacity and regional limits
   * @return availableSizes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of available Kafka instance sizes that can be created in this region when taking account current capacity and regional limits")
  @JsonProperty(JSON_PROPERTY_AVAILABLE_SIZES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getAvailableSizes() {
    return availableSizes;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_SIZES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailableSizes(List<String> availableSizes) {
    this.availableSizes = availableSizes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionCapacityListItem regionCapacityListItem = (RegionCapacityListItem) o;
    return Objects.equals(this.instanceType, regionCapacityListItem.instanceType) &&
        Objects.equals(this.availableSizes, regionCapacityListItem.availableSizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceType, availableSizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionCapacityListItem {\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    availableSizes: ").append(toIndentedString(availableSizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

