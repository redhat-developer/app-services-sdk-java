/*
 * Red Hat Openshift SmartEvents Fleet Manager
 * The API exposed by the fleet manager of the SmartEvents service.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: openbridge-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.smartevents.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.openshift.cloud.api.smartevents.models.Action;
import com.openshift.cloud.api.smartevents.models.BaseFilter;
import com.openshift.cloud.api.smartevents.models.Source;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ProcessorRequest
 */
@JsonPropertyOrder({
  ProcessorRequest.JSON_PROPERTY_NAME,
  ProcessorRequest.JSON_PROPERTY_FILTERS,
  ProcessorRequest.JSON_PROPERTY_TRANSFORMATION_TEMPLATE,
  ProcessorRequest.JSON_PROPERTY_ACTION,
  ProcessorRequest.JSON_PROPERTY_SOURCE
})
@JsonTypeName("ProcessorRequest")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ProcessorRequest {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private Set<BaseFilter> filters = null;

  public static final String JSON_PROPERTY_TRANSFORMATION_TEMPLATE = "transformationTemplate";
  private String transformationTemplate;

  public static final String JSON_PROPERTY_ACTION = "action";
  private Action action;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private Source source;

  public ProcessorRequest() { 
  }

  public ProcessorRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ProcessorRequest filters(Set<BaseFilter> filters) {
    
    this.filters = filters;
    return this;
  }

  public ProcessorRequest addFiltersItem(BaseFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new LinkedHashSet<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<BaseFilter> getFilters() {
    return filters;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(Set<BaseFilter> filters) {
    this.filters = filters;
  }


  public ProcessorRequest transformationTemplate(String transformationTemplate) {
    
    this.transformationTemplate = transformationTemplate;
    return this;
  }

   /**
   * Get transformationTemplate
   * @return transformationTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSFORMATION_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransformationTemplate() {
    return transformationTemplate;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFORMATION_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransformationTemplate(String transformationTemplate) {
    this.transformationTemplate = transformationTemplate;
  }


  public ProcessorRequest action(Action action) {
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Action getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAction(Action action) {
    this.action = action;
  }


  public ProcessorRequest source(Source source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Source getSource() {
    return source;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSource(Source source) {
    this.source = source;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessorRequest processorRequest = (ProcessorRequest) o;
    return Objects.equals(this.name, processorRequest.name) &&
        Objects.equals(this.filters, processorRequest.filters) &&
        Objects.equals(this.transformationTemplate, processorRequest.transformationTemplate) &&
        Objects.equals(this.action, processorRequest.action) &&
        Objects.equals(this.source, processorRequest.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, filters, transformationTemplate, action, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessorRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    transformationTemplate: ").append(toIndentedString(transformationTemplate)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

