/*
 * Connector Service Fleet Manager
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.connector.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openshift.cloud.api.connector.models.ClusterTarget;
import com.openshift.cloud.api.connector.models.ConnectorAllOfMetadata;
import com.openshift.cloud.api.connector.models.KafkaConnectionSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConnectorAllOf
 */
@JsonPropertyOrder({
  ConnectorAllOf.JSON_PROPERTY_METADATA,
  ConnectorAllOf.JSON_PROPERTY_DEPLOYMENT_LOCATION,
  ConnectorAllOf.JSON_PROPERTY_KAFKA,
  ConnectorAllOf.JSON_PROPERTY_CONNECTOR_TYPE_ID,
  ConnectorAllOf.JSON_PROPERTY_CONNECTOR_SPEC,
  ConnectorAllOf.JSON_PROPERTY_CHANNEL,
  ConnectorAllOf.JSON_PROPERTY_DESIRED_STATE,
  ConnectorAllOf.JSON_PROPERTY_STATUS
})
@JsonTypeName("Connector_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectorAllOf {
  public static final String JSON_PROPERTY_METADATA = "metadata";
  private ConnectorAllOfMetadata metadata;

  public static final String JSON_PROPERTY_DEPLOYMENT_LOCATION = "deployment_location";
  private ClusterTarget deploymentLocation;

  public static final String JSON_PROPERTY_KAFKA = "kafka";
  private KafkaConnectionSettings kafka;

  public static final String JSON_PROPERTY_CONNECTOR_TYPE_ID = "connector_type_id";
  private String connectorTypeId;

  public static final String JSON_PROPERTY_CONNECTOR_SPEC = "connector_spec";
  private Object connectorSpec;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private String channel;

  public static final String JSON_PROPERTY_DESIRED_STATE = "desired_state";
  private String desiredState;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public ConnectorAllOf() { 
  }

  public ConnectorAllOf metadata(ConnectorAllOfMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConnectorAllOfMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(ConnectorAllOfMetadata metadata) {
    this.metadata = metadata;
  }


  public ConnectorAllOf deploymentLocation(ClusterTarget deploymentLocation) {
    
    this.deploymentLocation = deploymentLocation;
    return this;
  }

   /**
   * Get deploymentLocation
   * @return deploymentLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ClusterTarget getDeploymentLocation() {
    return deploymentLocation;
  }


  @JsonProperty(JSON_PROPERTY_DEPLOYMENT_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeploymentLocation(ClusterTarget deploymentLocation) {
    this.deploymentLocation = deploymentLocation;
  }


  public ConnectorAllOf kafka(KafkaConnectionSettings kafka) {
    
    this.kafka = kafka;
    return this;
  }

   /**
   * Get kafka
   * @return kafka
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KafkaConnectionSettings getKafka() {
    return kafka;
  }


  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKafka(KafkaConnectionSettings kafka) {
    this.kafka = kafka;
  }


  public ConnectorAllOf connectorTypeId(String connectorTypeId) {
    
    this.connectorTypeId = connectorTypeId;
    return this;
  }

   /**
   * Get connectorTypeId
   * @return connectorTypeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectorTypeId() {
    return connectorTypeId;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectorTypeId(String connectorTypeId) {
    this.connectorTypeId = connectorTypeId;
  }


  public ConnectorAllOf connectorSpec(Object connectorSpec) {
    
    this.connectorSpec = connectorSpec;
    return this;
  }

   /**
   * Get connectorSpec
   * @return connectorSpec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTOR_SPEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getConnectorSpec() {
    return connectorSpec;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_SPEC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectorSpec(Object connectorSpec) {
    this.connectorSpec = connectorSpec;
  }


  public ConnectorAllOf channel(String channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChannel() {
    return channel;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(String channel) {
    this.channel = channel;
  }


  public ConnectorAllOf desiredState(String desiredState) {
    
    this.desiredState = desiredState;
    return this;
  }

   /**
   * Get desiredState
   * @return desiredState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DESIRED_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDesiredState() {
    return desiredState;
  }


  @JsonProperty(JSON_PROPERTY_DESIRED_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDesiredState(String desiredState) {
    this.desiredState = desiredState;
  }


  public ConnectorAllOf status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorAllOf connectorAllOf = (ConnectorAllOf) o;
    return Objects.equals(this.metadata, connectorAllOf.metadata) &&
        Objects.equals(this.deploymentLocation, connectorAllOf.deploymentLocation) &&
        Objects.equals(this.kafka, connectorAllOf.kafka) &&
        Objects.equals(this.connectorTypeId, connectorAllOf.connectorTypeId) &&
        Objects.equals(this.connectorSpec, connectorAllOf.connectorSpec) &&
        Objects.equals(this.channel, connectorAllOf.channel) &&
        Objects.equals(this.desiredState, connectorAllOf.desiredState) &&
        Objects.equals(this.status, connectorAllOf.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, deploymentLocation, kafka, connectorTypeId, connectorSpec, channel, desiredState, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorAllOf {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    deploymentLocation: ").append(toIndentedString(deploymentLocation)).append("\n");
    sb.append("    kafka: ").append(toIndentedString(kafka)).append("\n");
    sb.append("    connectorTypeId: ").append(toIndentedString(connectorTypeId)).append("\n");
    sb.append("    connectorSpec: ").append(toIndentedString(connectorSpec)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    desiredState: ").append(toIndentedString(desiredState)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

