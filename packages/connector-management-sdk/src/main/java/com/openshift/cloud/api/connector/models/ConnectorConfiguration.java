/*
 * Connector Service Fleet Manager
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.openshift.cloud.api.connector.models;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openshift.cloud.api.connector.models.KafkaConnectionSettings;
import com.openshift.cloud.api.connector.models.SchemaRegistryConnectionSettings;
import com.openshift.cloud.api.connector.models.ServiceAccount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConnectorConfiguration
 */
@JsonPropertyOrder({
  ConnectorConfiguration.JSON_PROPERTY_KAFKA,
  ConnectorConfiguration.JSON_PROPERTY_SERVICE_ACCOUNT,
  ConnectorConfiguration.JSON_PROPERTY_SCHEMA_REGISTRY,
  ConnectorConfiguration.JSON_PROPERTY_CONNECTOR
})
@JsonTypeName("ConnectorConfiguration")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConnectorConfiguration {
  public static final String JSON_PROPERTY_KAFKA = "kafka";
  private KafkaConnectionSettings kafka;

  public static final String JSON_PROPERTY_SERVICE_ACCOUNT = "service_account";
  private ServiceAccount serviceAccount;

  public static final String JSON_PROPERTY_SCHEMA_REGISTRY = "schema_registry";
  private SchemaRegistryConnectionSettings schemaRegistry;

  public static final String JSON_PROPERTY_CONNECTOR = "connector";
  private Object connector;

  public ConnectorConfiguration() { 
  }

  public ConnectorConfiguration kafka(KafkaConnectionSettings kafka) {
    
    this.kafka = kafka;
    return this;
  }

   /**
   * Get kafka
   * @return kafka
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public KafkaConnectionSettings getKafka() {
    return kafka;
  }


  @JsonProperty(JSON_PROPERTY_KAFKA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKafka(KafkaConnectionSettings kafka) {
    this.kafka = kafka;
  }


  public ConnectorConfiguration serviceAccount(ServiceAccount serviceAccount) {
    
    this.serviceAccount = serviceAccount;
    return this;
  }

   /**
   * Get serviceAccount
   * @return serviceAccount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_SERVICE_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ServiceAccount getServiceAccount() {
    return serviceAccount;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServiceAccount(ServiceAccount serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public ConnectorConfiguration schemaRegistry(SchemaRegistryConnectionSettings schemaRegistry) {
    
    this.schemaRegistry = schemaRegistry;
    return this;
  }

   /**
   * Get schemaRegistry
   * @return schemaRegistry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_SCHEMA_REGISTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SchemaRegistryConnectionSettings getSchemaRegistry() {
    return schemaRegistry;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_REGISTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemaRegistry(SchemaRegistryConnectionSettings schemaRegistry) {
    this.schemaRegistry = schemaRegistry;
  }


  public ConnectorConfiguration connector(Object connector) {
    
    this.connector = connector;
    return this;
  }

   /**
   * Get connector
   * @return connector
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getConnector() {
    return connector;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConnector(Object connector) {
    this.connector = connector;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorConfiguration connectorConfiguration = (ConnectorConfiguration) o;
    return Objects.equals(this.kafka, connectorConfiguration.kafka) &&
        Objects.equals(this.serviceAccount, connectorConfiguration.serviceAccount) &&
        Objects.equals(this.schemaRegistry, connectorConfiguration.schemaRegistry) &&
        Objects.equals(this.connector, connectorConfiguration.connector);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kafka, serviceAccount, schemaRegistry, connector);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorConfiguration {\n");
    sb.append("    kafka: ").append(toIndentedString(kafka)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    schemaRegistry: ").append(toIndentedString(schemaRegistry)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

