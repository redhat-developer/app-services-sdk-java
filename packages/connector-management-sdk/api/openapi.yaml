openapi: 3.0.0
info:
  description: Connector Service Fleet Manager is a Rest API to manage connectors.
  title: Connector Service Fleet Manager
  version: 0.1.0
servers:
- description: Main (production) server
  url: https://api.openshift.com
- description: Staging server
  url: https://api.stage.openshift.com
- description: localhost
  url: http://localhost:8000
- description: current domain
  url: /
tags:
- name: Connector Types
- name: Connectors
- name: Connector Clusters
- name: Connector Service
paths:
  /api/connector_mgmt/v1:
    get:
      description: Returns the version metadata
      operationId: getVersionMetadata
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionMetadata'
          description: Version metadata
      summary: Returns the version metadata
      tags:
      - Connector Service
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connector_types/{connector_type_id}:
    get:
      description: Get a connector type by id
      operationId: getConnectorTypeByID
      parameters:
      - description: The id of the connector type
        explode: false
        in: path
        name: connector_type_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                ConnectorTypeExample:
                  $ref: '#/components/examples/ConnectorTypeExample'
              schema:
                $ref: '#/components/schemas/ConnectorType'
          description: The connector type matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector type by id
      tags:
      - Connector Types
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connector_types:
    get:
      description: Returns a list of connector types
      operationId: getConnectorTypes
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Specifies the order by criteria. The syntax of this parameter is
          similar to the syntax of the `order by` clause of an SQL statement.
          Each query can be ordered by any of the `ConnectorType` fields.
          For example, to return all Connector types ordered by their name, use the following syntax:

          ```sql
          name asc
          ```

          To return all Connector types ordered by their name _and_ version, use the following syntax:

          ```sql
          name asc, version asc
          ```

          If the parameter isn't provided, or if the value is empty, then
          the results are ordered by name.
        examples:
          orderBy:
            value: name asc
        explode: true
        in: query
        name: orderBy
        required: false
        schema:
          type: string
        style: form
      - description: |
          Search criteria.

          The syntax of this parameter is similar to the syntax of the `where` clause of a
          SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
          Allowed operators are `<>`, `=`, or `LIKE`.
          Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

          Examples:

          To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

          ```
          name = aws-sqs-source and channel = stable
          ```[p-]

          To return a Kafka instance with a name that starts with `aws`, use the following syntax:

          ```
          name like aws%25
          ```

          If the parameter isn't provided, or if the value is empty, then all the Connector Type
          that the user has permission to see are returned.

          Note. If the query is invalid, an error is returned.
        examples:
          search:
            value: name = aws-sqs-source and channel = stable
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTypeList'
          description: A list of connector types
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
      tags:
      - Connector Types
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connectors:
    get:
      description: Returns a list of connector types
      operationId: listConnectors
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorList'
          description: A list of connectors
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector types
      tags:
      - Connectors
      x-accepts: application/json
    post:
      description: Create a new connector
      operationId: createConnector
      parameters:
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            examples:
              ConnectorCreateExample:
                $ref: '#/components/examples/ConnectorCreateExample'
            schema:
              $ref: '#/components/schemas/ConnectorRequest'
        description: Connector data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                "400CreationExample":
                  $ref: '#/components/examples/400CreationExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the connector
      security:
      - Bearer: []
      summary: Create a new connector
      tags:
      - Connectors
      x-contentType: application/json
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connectors/{id}:
    delete:
      description: Delete a connector
      operationId: deleteConnector
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404DeleteExample":
                  $ref: '#/components/examples/404DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: No kafka request with specified ID exists
        "500":
          content:
            application/json:
              examples:
                "500DeleteExample":
                  $ref: '#/components/examples/500DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector
      tags:
      - Connectors
      x-accepts: application/json
    get:
      description: Get a connector
      operationId: getConnector
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector
      tags:
      - Connectors
      x-accepts: application/json
    patch:
      description: Patch a connector
      operationId: patchConnector
      parameters:
      - description: The ID of record
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/merge-patch+json:
            schema:
              type: object
          application/json-patch+json:
            schema:
              description: A JSON Patch, RFC 6902 - https://tools.ietf.org/html/rfc6902
              type: object
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorRequest'
        description: Data to patch the connector with
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
          description: The connector matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Patch a connector
      tags:
      - Connectors
      x-contentType: application/merge-patch+json
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connector_clusters:
    get:
      description: Returns a list of connector clusters
      operationId: listConnectorClusters
      parameters:
      - description: Page index
        examples:
          page:
            value: "1"
        explode: true
        in: query
        name: page
        required: false
        schema:
          type: string
        style: form
      - description: Number of items in each page
        examples:
          size:
            value: "100"
        explode: true
        in: query
        name: size
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorClusterList'
          description: A list of connector clusters
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Returns a list of connector clusters
      tags:
      - Connector Clusters
      x-accepts: application/json
    post:
      description: Create a new connector cluster
      operationId: createConnectorCluster
      parameters:
      - description: Perform the action in an asynchronous manner
        explode: true
        in: query
        name: async
        required: true
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            examples:
              ConnectorClusterCreateExample:
                $ref: '#/components/examples/ConnectorClusterCreateExample'
            schema:
              $ref: '#/components/schemas/ConnectorClusterRequest'
        description: Connector cluster data
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: Accepted
        "400":
          content:
            application/json:
              examples:
                "400CreationExample":
                  $ref: '#/components/examples/400CreationExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Validation errors occurred
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: The requested resource doesn't exist
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: An unexpected error occurred creating the connector cluster
      security:
      - Bearer: []
      summary: Create a new connector cluster
      tags:
      - Connector Clusters
      x-contentType: application/json
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}:
    delete:
      description: Delete a connector cluster
      operationId: deleteConnectorCluster
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Deleted
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404DeleteExample":
                  $ref: '#/components/examples/404DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: No resource with specified ID exists
        "500":
          content:
            application/json:
              examples:
                "500DeleteExample":
                  $ref: '#/components/examples/500DeleteExample'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Delete a connector cluster
      tags:
      - Connector Clusters
      x-accepts: application/json
    get:
      description: Get a connector cluster
      operationId: getConnectorCluster
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorCluster'
          description: The connector cluster matching the request
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector cluster
      tags:
      - Connector Clusters
      x-accepts: application/json
    put:
      description: udpate a connector cluster
      operationId: updateConnectorClusterById
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorClusterRequest'
        description: Data to updated connector with
        required: true
      responses:
        "204":
          description: Cluster status is updated
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: udpate a connector cluster
      tags:
      - Connector Clusters
      x-contentType: application/json
      x-accepts: application/json
  /api/connector_mgmt/v1/kafka_connector_clusters/{connector_cluster_id}/addon_parameters:
    get:
      description: Get a connector cluster's addon parameters
      operationId: getConnectorClusterAddonParameters
      parameters:
      - description: The id of the connector cluster
        explode: false
        in: path
        name: connector_cluster_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddonParameterList'
          description: The parameters that should be used to configure the managed
            connector addon on the cluster.
        "401":
          content:
            application/json:
              examples:
                "401Example":
                  $ref: '#/components/examples/401Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Auth token is invalid
        "404":
          content:
            application/json:
              examples:
                "404Example":
                  $ref: '#/components/examples/404Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: No matching connector cluster type exists
        "500":
          content:
            application/json:
              examples:
                "500Example":
                  $ref: '#/components/examples/500Example'
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error occurred
      security:
      - Bearer: []
      summary: Get a connector cluster's addon parameters
      tags:
      - Connector Clusters
      x-accepts: application/json
components:
  examples:
    ConnectorClusterCreateExample:
      value:
        name: MyCluster
    ConnectorTypeExample:
      value:
        id: log_sink_0.1
        kind: ConnectorType
        href: /api/connector_mgmt/v1/kafka_connector_types/log_sink_0.1
        name: Log Sink
        version: "0.1"
        channels:
        - stable
        description: Log Sink
        icon_href: /api/connector_mgmt/v1/kafka_connector_types/log_sink.png
        labels:
        - sink
        capabilities:
        - data_shape
        - processors
        schema:
          properties:
            common:
              required: []
              title: Log
              type: object
              properties:
                multi_line:
                  default: false
                  description: Multi Line
                  title: Multi Line
                  type: boolean
                  x-group: endpoint
                show_all:
                  default: false
                  description: Show All
                  title: Show All
                  type: boolean
                  x-group: endpoint
            topics:
              description: Comma separated list of Kafka topic names
              title: Topic names
              type: string
              x-group: kafka
            steps:
              type: array
              items:
                oneOf:
                - properties:
                    insert_field:
                      description: Adds a custom field with a constant value to the
                        message in transit.
                      properties:
                        field:
                          description: The name of the field to be added
                          title: Field
                          type: string
                        value:
                          description: The value of the field
                          title: Value
                          type: string
                      required:
                      - field
                      - value
                      title: Insert Field Action
                      type: object
                  required:
                  - insert_field
                  type: object
                - properties:
                    extract_field:
                      description: Extract a field from the body
                      properties:
                        field:
                          description: The name of the field to be added
                          title: Field
                          type: string
                      required:
                      - field
                      title: Extract Field Action
                      type: object
                  required:
                  - extract_field
                  type: object
                - properties:
                    has_header_filter:
                      description: Filter based on the presence of one header
                      properties:
                        name:
                          description: The header name to evaluate
                          example: headerName
                          title: Header Name
                          type: string
                      required:
                      - name
                      title: Has Header Filter Action
                      type: object
                  required:
                  - has_header_filter
                  type: object
    ConnectorCreateExample:
      value:
        name: MyLogger
        deployment_location:
          kind: ConnectoCluster
          cluster_id: 9bsv0s7tne7g02gh5g4g
        kafka:
          id: 9bsv0s6brfr002pfnkh0
          client_id: srvc-acct-162ef2d8-0209-4117-8462-df63c2025c26
          client_secret: b144d991-08eb-4472-8ec1-eb034c69231b
          url: foo-9bsv0s6brfr002pfnkh0.kas.acme.com:443
        schema_registry:
          id: 9bsv0s0k8lng031se9q0
          client_id: srvc-acct-e025265e-a88a-44fb-8450-ed010eb6bc5c
          client_secret: dc5a8298-bed7-422e-8947-f6fda69292ff
          url: bar-9bsv0s2mfca002t9q7sg.srs.acme.com:443
        channel: stable
        connector_type_id: log_sink_0.1
        connector:
          common:
            show_all: true
            multi_lines: true
          topics: foo,bar
          data_shape:
            key:
              format: STRING
            value:
              format: JSON
          processors:
          - insert_field:
              name: fieldName
              value: fieldValue
        desired_state: ready
        error_handling:
          dead_letter_queue:
            topic: dlq
    "400CreationExample":
      value:
        id: "103"
        kind: Error
        href: /api/connector_mgmt/v1/errors/103
        code: CONNECTOR-MGMT-103
        reason: Synchronous action is not supported, use async=true parameter
        operation_id: 1iWIimqGcrDuL61aUxIZqBTqNRa
    "400InvalidQueryExample":
      value:
        id: "203"
        kind: Error
        href: /api/connector_mgmt/v1/errors/23
        code: CONNECTOR-MGMT-23
        reason: |
          Failed to parse search query: Unable to list Kafka requests for api_kafka_service: CONNECTOR-MGMT-23:
          Failed to parse search query: Unsupported column name for search: 'id'. Supported column names are:
          region, name, cloud_provider, name, status. Query invalid: id = 123
        operation_id: 1lWDGuybIrEnxrAem724gqkkiDv
    "404Example":
      value:
        id: "404"
        kind: Error
        href: /api/connector_mgmt/v1/errors/7
        code: CONNECTOR-MGMT-7
        reason: The requested resource doesn't exist
    "404DeleteExample":
      value:
        id: "7"
        kind: Error
        href: /api/connector_mgmt/v1/errors/7
        code: CONNECTOR-MGMT-7
        reason: Connector with id='1iK3duVYIvv5YvLlyz1mGR3JyqN' not found
        operation_id: 1iYO7g2g6HTdUKUa2ksH82kQD3y
    "401Example":
      value:
        id: "11"
        kind: Error
        href: /api/connector_mgmt/v1/errors/11
        code: CONNECTOR-MGMT-11
        reason: 'Unable to verify JWT token: Required authorization token not found'
        operation_id: 1iY3UhEhwmXBpWPfI2lNekpd4ZD
    "409NameConflictExample":
      value:
        id: "36"
        kind: Error
        href: /api/connector_mgmt/v1/errors/36
        code: CONNECTOR-MGMT-36
        reason: Conenctor name is already used
        operation_id: 6kY0UiEkzkXCzWPeI2oYehd3ED
    "500Example":
      value:
        id: "9"
        kind: Error
        href: /api/connector_mgmt/v1/errors/9
        code: CONNECTOR-MGMT-9
        reason: Unspecified error
        operation_id: 1ieELvF9jMQY6YghfM9gGRsHvEW
    "500DeleteExample":
      value:
        id: "9"
        kind: Error
        href: /api/connector_mgmt/v1/errors/9
        code: CONNECTOR-MGMT-9
        reason: |
          Error deleting syncset: OCM-EX-9: failed to delete syncset: ext-serviceapi-1ix03lndlmq0qfc7sita5sljv8e
          for cluster id: 1g5d88q0lrcdv4g7alb7slfgnj3dhbsj%!(EXTRA *errors.Error=identifier
          is '404', code is 'CLUSTERS-MGMT-404' and operation identifier is '1g5or50viu07oealuehrkc26dgftj1ac':
          Cluster '1g5d88q0lrcdv4g7alb7slfgnj3dhbsj' not found)
        operation_id: 1iYTsWry6nsqb2sNmFj5bXpD7Ca
  parameters:
    id:
      description: The ID of record
      explode: false
      in: path
      name: id
      required: true
      schema:
        type: string
      style: simple
    page:
      description: Page index
      examples:
        page:
          value: "1"
      explode: true
      in: query
      name: page
      required: false
      schema:
        type: string
      style: form
    size:
      description: Number of items in each page
      examples:
        size:
          value: "100"
      explode: true
      in: query
      name: size
      required: false
      schema:
        type: string
      style: form
    orderBy:
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the `order by` clause of an SQL statement.
        Each query can be ordered by any of the `ConnectorType` fields.
        For example, to return all Connector types ordered by their name, use the following syntax:

        ```sql
        name asc
        ```

        To return all Connector types ordered by their name _and_ version, use the following syntax:

        ```sql
        name asc, version asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        the results are ordered by name.
      examples:
        orderBy:
          value: name asc
      explode: true
      in: query
      name: orderBy
      required: false
      schema:
        type: string
      style: form
    search:
      description: |
        Search criteria.

        The syntax of this parameter is similar to the syntax of the `where` clause of a
        SQL statement. Allowed fields in the search are `name`, `description`, `version`, `label`, and `channel`.
        Allowed operators are `<>`, `=`, or `LIKE`.
        Allowed conjunctive operators are `AND` and `OR`. However, you can use a maximum of 10 conjunctions in a search query.

        Examples:

        To return a Connector Type with the name `aws-sqs-source` and the channel `stable`, use the following syntax:

        ```
        name = aws-sqs-source and channel = stable
        ```[p-]

        To return a Kafka instance with a name that starts with `aws`, use the following syntax:

        ```
        name like aws%25
        ```

        If the parameter isn't provided, or if the value is empty, then all the Connector Type
        that the user has permission to see are returned.

        Note. If the query is invalid, an error is returned.
      examples:
        search:
          value: name = aws-sqs-source and channel = stable
      explode: true
      in: query
      name: search
      required: false
      schema:
        type: string
      style: form
  schemas:
    List:
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
      - items
      - kind
      - page
      - size
      - total
      type: object
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/Error_allOf'
    ObjectReference:
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
      type: object
    ObjectMeta:
      properties:
        owner:
          type: string
        created_at:
          format: date-time
          type: string
        modified_at:
          format: date-time
          type: string
      type: object
    ServiceConnectionSettings:
      properties:
        id:
          type: string
        url:
          type: string
      required:
      - id
      - url
    ServiceAccount:
      properties:
        client_id:
          type: string
        client_secret:
          type: string
      required:
      - client_id
      - client_secret
    DeploymentLocation:
      discriminator:
        mapping:
          ConnectorCluster: '#/components/schemas/ConnectorClusterTarget'
        propertyName: kind
      oneOf:
      - $ref: '#/components/schemas/ConnectorClusterTarget'
    ConnectorClusterTarget:
      description: Targets workloads to an addon cluster
      properties:
        kind:
          type: string
        cluster_id:
          type: string
      required:
      - kind
      type: object
    VersionMetadata:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/VersionMetadata_allOf'
    KafkaConnectionSettings:
      allOf:
      - $ref: '#/components/schemas/ServiceConnectionSettings'
      description: Holds the configuration to connect to a Kafka Instance.
    SchemaRegistryConnectionSettings:
      allOf:
      - $ref: '#/components/schemas/ServiceConnectionSettings'
      description: Holds the configuration to connect to a Schem Registry Instance.
    AddonParameter:
      description: A addon parameter
      example:
        id: id
        value: value
      properties:
        id:
          type: string
        value:
          type: string
      type: object
    AddonParameterList:
      description: A list of addon parameters
      items:
        $ref: '#/components/schemas/AddonParameter'
      type: array
    ConnectorClusterState:
      enum:
      - disconnected
      - ready
      type: string
    ConnectorClusterRequestMeta:
      properties:
        name:
          type: string
    ConnectorClusterRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'
      description: Schema for the request to update a data plane cluster's status
    ConnectorClusterMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorClusterRequestMeta'
    ConnectorClusterStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorClusterStatus_status'
    ConnectorCluster:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorClusterMeta'
      - $ref: '#/components/schemas/ConnectorClusterStatus'
    ConnectorClusterList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorClusterList_allOf'
    Channel:
      default: stable
      enum:
      - stable
      type: string
    ConnectorDesiredState:
      enum:
      - ready
      - stopped
      - deleted
      type: string
    ConnectorState:
      enum:
      - assigning
      - ready
      - stopped
      - deleted
      - provisioning
      - deprovisioning
      type: string
    ConnectorConfiguration:
      properties:
        kafka:
          $ref: '#/components/schemas/KafkaConnectionSettings'
        service_account:
          $ref: '#/components/schemas/ServiceAccount'
        schema_registry:
          $ref: '#/components/schemas/SchemaRegistryConnectionSettings'
        connector:
          type: object
      required:
      - connector
      - kafka
      - service_account
    ConnectorRequestMeta:
      properties:
        name:
          type: string
        connector_type_id:
          type: string
        channel:
          $ref: '#/components/schemas/Channel'
        deployment_location:
          $ref: '#/components/schemas/DeploymentLocation'
        desired_state:
          $ref: '#/components/schemas/ConnectorDesiredState'
      required:
      - connector_type_id
      - deployment_location
      - desired_state
      - name
    ConnectorRequest:
      allOf:
      - $ref: '#/components/schemas/ConnectorRequestMeta'
      - $ref: '#/components/schemas/ConnectorConfiguration'
    ConnectorMeta:
      allOf:
      - $ref: '#/components/schemas/ObjectMeta'
      - $ref: '#/components/schemas/ConnectorRequestMeta'
      - $ref: '#/components/schemas/ConnectorMeta_allOf'
    ConnectorStatus:
      properties:
        status:
          $ref: '#/components/schemas/ConnectorStatus_status'
    Connector:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorMeta'
      - $ref: '#/components/schemas/ConnectorConfiguration'
      - $ref: '#/components/schemas/ConnectorStatus'
    ConnectorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorList_allOf'
    ConnectorType:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - $ref: '#/components/schemas/ConnectorType_allOf'
      description: Represents a connector type supported by the API
      oneOf:
      - required:
        - name
        - schema
        - version
      - required:
        - json_schema
        - name
        - version
    ConnectorTypeList:
      allOf:
      - $ref: '#/components/schemas/List'
      - $ref: '#/components/schemas/ConnectorTypeList_allOf'
    Error_allOf:
      properties:
        code:
          type: string
        reason:
          type: string
        operation_id:
          type: string
      type: object
    VersionMetadata_allOf:
      example:
        kind: APIVersion
        id: v1
        href: /api/connector_mgmt/v1
        collections:
        - id: kafkas
          href: /api/connector_mgmt/v1/kafka_connectors
          kind: ConnectorList
      properties:
        collections:
          items:
            allOf:
            - $ref: '#/components/schemas/ObjectReference'
          type: array
      type: object
    ConnectorClusterStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorClusterState'
        error:
          type: string
      type: object
    ConnectorClusterList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorCluster'
          type: array
      type: object
    ConnectorMeta_allOf:
      properties:
        resource_version:
          format: int64
          type: integer
      type: object
    ConnectorStatus_status:
      properties:
        state:
          $ref: '#/components/schemas/ConnectorState'
        error:
          type: string
      type: object
    ConnectorList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/Connector'
          type: array
      type: object
    ConnectorType_allOf:
      properties:
        name:
          description: Name of the connector type.
          type: string
        version:
          description: Version of the connector type.
          type: string
        channels:
          description: Channels of the connector type.
          items:
            $ref: '#/components/schemas/Channel'
          type: array
        description:
          description: A description of the connector.
          type: string
        icon_href:
          description: URL to an icon of the connector.
          type: string
        labels:
          description: Labels used to categorize the connector
          items:
            type: string
          type: array
        capabilities:
          description: The capabilities supported by the conenctor
          items:
            type: string
          type: array
        schema:
          description: A json schema that can be used to validate a ConnectorRequest
            connector field.
          type: object
        json_schema:
          description: A json schema that can be used to validate a ConnectorRequest
            connector field.
          type: object
      type: object
    ConnectorTypeList_allOf:
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectorType'
          type: array
      type: object
  securitySchemes:
    Bearer:
      bearerFormat: JWT
      scheme: bearer
      type: http

